{
	"info": {
		"_postman_id": "9593ead3-697e-4e2a-a9b8-47649e7b1a8c",
		"name": "wodss API tests for mongos",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "All Tests",
			"item": [
				{
					"name": "Pre-request scrips",
					"item": [
						{
							"name": "Add Pre/request scripts",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "92cc283f-3d24-4a2e-a712-3e3017282029",
										"exec": [
											"function formatDate(date) {\r",
											"    var d = new Date(date),\r",
											"        month = '' + (d.getMonth() + 1),\r",
											"        day = '' + d.getDate(),\r",
											"        year = d.getFullYear();\r",
											"\r",
											"    if (month.length < 2) month = '0' + month;\r",
											"    if (day.length < 2) day = '0' + day;\r",
											"\r",
											"    return [year, month, day].join('-');\r",
											"}\r",
											"\r",
											"var nineMonthsBack = new Date();\r",
											"nineMonthsBack.setMonth(nineMonthsBack.getMonth() - 9);\r",
											"pm.environment.set(\"nineMonthsBack\", formatDate(nineMonthsBack));\r",
											"\r",
											"var eightMonthsBack = new Date();\r",
											"eightMonthsBack.setMonth(eightMonthsBack.getMonth() - 8);\r",
											"pm.environment.set(\"eightMonthsBack\", formatDate(eightMonthsBack));\r",
											"\r",
											"var sevenMonthsBack = new Date();\r",
											"sevenMonthsBack.setMonth(sevenMonthsBack.getMonth() - 7);\r",
											"pm.environment.set(\"sevenMonthsBack\", formatDate(sevenMonthsBack));\r",
											"\r",
											"var sixMonthsBack = new Date();\r",
											"sixMonthsBack.setMonth(sixMonthsBack.getMonth() - 6);\r",
											"pm.environment.set(\"sixMonthsBack\", formatDate(sixMonthsBack));\r",
											"\r",
											"var fiveMonthsBack = new Date();\r",
											"fiveMonthsBack.setMonth(fiveMonthsBack.getMonth() - 5);\r",
											"pm.environment.set(\"fiveMonthsBack\", formatDate(fiveMonthsBack));\r",
											"\r",
											"var fourMonthsBack = new Date();\r",
											"fourMonthsBack.setMonth(fourMonthsBack.getMonth() - 4);\r",
											"pm.environment.set(\"fourMonthsBack\", formatDate(fourMonthsBack));\r",
											"\r",
											"var threeMonthsBack = new Date();\r",
											"threeMonthsBack.setMonth(threeMonthsBack.getMonth() - 3);\r",
											"pm.environment.set(\"threeMonthsBack\", formatDate(threeMonthsBack));\r",
											"\r",
											"var twoMonthsBack = new Date();\r",
											"twoMonthsBack.setMonth(twoMonthsBack.getMonth() - 2);\r",
											"pm.environment.set(\"twoMonthsBack\", formatDate(twoMonthsBack));\r",
											"\r",
											"var oneMonthsBack = new Date();\r",
											"oneMonthsBack.setMonth(oneMonthsBack.getMonth() - 1);\r",
											"pm.environment.set(\"oneMonthsBack\", formatDate(oneMonthsBack));\r",
											"\r",
											"var today = new Date();\r",
											"pm.environment.set(\"today\", formatDate(today));\r",
											"\r",
											"var inOneMonths = new Date();\r",
											"inOneMonths.setMonth(inOneMonths.getMonth() + 1);\r",
											"pm.environment.set(\"inOneMonths\", formatDate(inOneMonths));\r",
											"\r",
											"var inTwoMonths = new Date();\r",
											"inTwoMonths.setMonth(inTwoMonths.getMonth() + 2);\r",
											"pm.environment.set(\"inTwoMonths\", formatDate(inTwoMonths));\r",
											"\r",
											"var inThreeMonths = new Date();\r",
											"inThreeMonths.setMonth(inThreeMonths.getMonth() + 3);\r",
											"pm.environment.set(\"inThreeMonths\", formatDate(inThreeMonths));\r",
											"\r",
											"var inFourMonths = new Date();\r",
											"inFourMonths.setMonth(inFourMonths.getMonth() + 4);\r",
											"pm.environment.set(\"inFourMonths\", formatDate(inFourMonths));\r",
											"\r",
											"var inFiveMonths = new Date();\r",
											"inFiveMonths.setMonth(inFiveMonths.getMonth() + 5);\r",
											"pm.environment.set(\"inFiveMonths\", formatDate(inFiveMonths));\r",
											"\r",
											"var inSixMonths = new Date();\r",
											"inSixMonths.setMonth(inSixMonths.getMonth() + 6);\r",
											"pm.environment.set(\"inSixMonths\", formatDate(inSixMonths));\r",
											"\r",
											"var inSevenMonths = new Date();\r",
											"inSevenMonths.setMonth(inSevenMonths.getMonth() + 7);\r",
											"pm.environment.set(\"inSevenMonths\", formatDate(inSevenMonths));\r",
											"\r",
											"var inEightMonths = new Date();\r",
											"inEightMonths.setMonth(inEightMonths.getMonth() + 8);\r",
											"pm.environment.set(\"inEightMonths\", formatDate(inEightMonths));\r",
											"\r",
											"var inNineMonths = new Date();\r",
											"inNineMonths.setMonth(inNineMonths.getMonth() + 9);\r",
											"pm.environment.set(\"inNineMonths\", formatDate(inNineMonths));\r",
											"\r",
											"var inTenMonths = new Date();\r",
											"inTenMonths.setMonth(inTenMonths.getMonth() + 10);\r",
											"pm.environment.set(\"inTenMonths\", formatDate(inTenMonths));\r",
											"\r",
											"var inElevenMonths = new Date();\r",
											"inElevenMonths.setMonth(inElevenMonths.getMonth() + 11);\r",
											"pm.environment.set(\"inElevenMonths\", formatDate(inElevenMonths));\r",
											"\r",
											"var inTwelveMonths = new Date();\r",
											"inTwelveMonths.setMonth(inTwelveMonths.getMonth() + 12);\r",
											"pm.environment.set(\"inTwelveMonths\", formatDate(inTwelveMonths));\r",
											"\r",
											"var inThirteenMonths = new Date();\r",
											"inThirteenMonths.setMonth(inThirteenMonths.getMonth() + 13);\r",
											"pm.environment.set(\"inThirteenMonths\", formatDate(inThirteenMonths));\r",
											"\r",
											"\r",
											"\r",
											"var nineMonthsAndOneDayBack = new Date();\r",
											"nineMonthsAndOneDayBack.setDate(nineMonthsBack.getDate() - 1);\r",
											"pm.environment.set(\"nineMonthsAndOneDayBack\", formatDate(nineMonthsAndOneDayBack));\r",
											"\r",
											"var eightMonthsAndOneDayBack = new Date();\r",
											"eightMonthsAndOneDayBack.setDate(eightMonthsBack.getDate() - 1);\r",
											"pm.environment.set(\"eightMonthsAndOneDayBack\", formatDate(eightMonthsAndOneDayBack));\r",
											"\r",
											"var sevenMonthsAndOneDayBack = new Date();\r",
											"sevenMonthsAndOneDayBack.setDate(sevenMonthsBack.getDate() - 1);\r",
											"pm.environment.set(\"sevenMonthsAndOneDayBack\", formatDate(sevenMonthsAndOneDayBack));\r",
											"\r",
											"var sixMonthsAndOneDayBack = new Date();\r",
											"sixMonthsAndOneDayBack.setDate(sixMonthsBack.getDate() - 1);\r",
											"pm.environment.set(\"sixMonthsAndOneDayBack\", formatDate(sixMonthsAndOneDayBack));\r",
											"\r",
											"var fiveMonthsAndOneDayBack = new Date();\r",
											"fiveMonthsAndOneDayBack.setDate(fiveMonthsBack.getDate() - 1);\r",
											"pm.environment.set(\"fiveMonthsAndOneDayBack\", formatDate(fiveMonthsAndOneDayBack));\r",
											"\r",
											"var fourMonthsAndOneDayBack = new Date();\r",
											"fourMonthsAndOneDayBack.setDate(fourMonthsBack.getDate() - 1);\r",
											"pm.environment.set(\"fourMonthsAndOneDayBack\", formatDate(fourMonthsAndOneDayBack));\r",
											"\r",
											"var threeMonthsAndOneDayBack = new Date();\r",
											"threeMonthsAndOneDayBack.setDate(threeMonthsBack.getDate() - 1);\r",
											"pm.environment.set(\"threeMonthsAndOneDayBack\", formatDate(threeMonthsAndOneDayBack));\r",
											"\r",
											"var twoMonthsAndOneDayBack = new Date();\r",
											"twoMonthsAndOneDayBack.setDate(twoMonthsBack.getDate() - 1);\r",
											"pm.environment.set(\"twoMonthsAndOneDayBack\", formatDate(twoMonthsAndOneDayBack));\r",
											"\r",
											"var oneMonthsAndOneDayBack = new Date();\r",
											"oneMonthsAndOneDayBack.setDate(oneMonthsBack.getDate() - 1);\r",
											"pm.environment.set(\"oneMonthsAndOneDayBack\", formatDate(oneMonthsAndOneDayBack));\r",
											"\r",
											"var today = new Date();\r",
											"pm.environment.set(\"today\", formatDate(today));\r",
											"\r",
											"var yesterday = new Date();\r",
											"yesterday.setDate(today.getDate() - 1);\r",
											"pm.environment.set(\"yesterday\", formatDate(yesterday));\r",
											"\r",
											"var tomorrow = new Date();\r",
											"tomorrow.setDate(today.getDate() + 1);\r",
											"pm.environment.set(\"tomorrow\", formatDate(tomorrow));\r",
											"\r",
											"var inOneMonthsAndOneDay = new Date();\r",
											"inOneMonthsAndOneDay.setDate(inOneMonths.getDate() + 1);\r",
											"pm.environment.set(\"inOneMonthsAndOneDay\", formatDate(inOneMonthsAndOneDay));\r",
											"\r",
											"var inTwoMonthsAndOneDay = new Date();\r",
											"inTwoMonthsAndOneDay.setDate(inTwoMonths.getDate() + 1);\r",
											"pm.environment.set(\"inTwoMonthsAndOneDay\", formatDate(inTwoMonthsAndOneDay));\r",
											"\r",
											"var inThreeMonthsAndOneDay = new Date();\r",
											"inThreeMonthsAndOneDay.setDate(inThreeMonths.getDate() + 1);\r",
											"pm.environment.set(\"inThreeMonthsAndOneDay\", formatDate(inThreeMonthsAndOneDay));\r",
											"\r",
											"var inFourMonthsAndOneDay = new Date();\r",
											"inFourMonthsAndOneDay.setDate(inFourMonths.getDate() + 1);\r",
											"pm.environment.set(\"inFourMonthsAndOneDay\", formatDate(inFourMonthsAndOneDay));\r",
											"\r",
											"var inFiveMonthsAndOneDay = new Date();\r",
											"inFiveMonthsAndOneDay.setDate(inFiveMonths.getDate() + 1);\r",
											"pm.environment.set(\"inFiveMonthsAndOneDay\", formatDate(inFiveMonthsAndOneDay));\r",
											"\r",
											"var inSixMonthsAndOneDay = new Date();\r",
											"inSixMonthsAndOneDay.setDate(inSixMonths.getDate() + 1);\r",
											"pm.environment.set(\"inSixMonthsAndOneDay\", formatDate(inSixMonthsAndOneDay));\r",
											"\r",
											"var inSevenMonthsAndOneDay = new Date();\r",
											"inSevenMonthsAndOneDay.setDate(inSevenMonths.getDate() + 1);\r",
											"pm.environment.set(\"inSevenMonthsAndOneDay\", formatDate(inSevenMonthsAndOneDay));\r",
											"\r",
											"var inEightMonthsAndOneDay = new Date();\r",
											"inEightMonthsAndOneDay.setDate(inEightMonths.getDate() + 1);\r",
											"pm.environment.set(\"inEightMonthsAndOneDay\", formatDate(inEightMonthsAndOneDay));\r",
											"\r",
											"var inNineMonthsAndOneDay = new Date();\r",
											"inNineMonthsAndOneDay.setDate(inNineMonths.getDate() + 1);\r",
											"pm.environment.set(\"inNineMonthsAndOneDay\", formatDate(inNineMonthsAndOneDay));\r",
											"\r",
											"var inTenMonthsAndOneDay = new Date();\r",
											"inTenMonthsAndOneDay.setDate(inTenMonths.getDate() + 1);\r",
											"pm.environment.set(\"inTenMonthsAndOneDay\", formatDate(inTenMonthsAndOneDay));\r",
											"\r",
											"var inElevenMonthsAndOneDay = new Date();\r",
											"inElevenMonthsAndOneDay.setDate(inElevenMonths.getDate() + 1);\r",
											"pm.environment.set(\"inElevenMonthsAndOneDay\", formatDate(inElevenMonthsAndOneDay));\r",
											"\r",
											"var inTwelveMonthsAndOneDay = new Date();\r",
											"inTwelveMonthsAndOneDay.setDate(inTwelveMonths.getDate() + 1);\r",
											"pm.environment.set(\"inTwelveMonthsAndOneDay\", formatDate(inTwelveMonthsAndOneDay));\r",
											"\r",
											"var inThirteenMonthsAndOneDay = new Date();\r",
											"inThirteenMonthsAndOneDay.setDate(inThirteenMonths.getDate() + 1);\r",
											"pm.environment.set(\"inThirteenMonthsAndOneDay\", formatDate(inThirteenMonthsAndOneDay));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										""
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "with ADMINISTRATOR 1",
					"item": [
						{
							"name": "Request a JWT token for ADMINISTRATOR 1 should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7709b55-1173-4bd0-a0c6-319afc62d0ee",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a85da618-0370-466b-b200-3bc006e38f6e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"emailAddress\": \"{{ADMINISTRATOR 1 emailAddress}}\",\r\n  \"rawPassword\": \"WrongPassword\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/token",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"token"
									]
								},
								"description": "Login should fail with wrong password"
							},
							"response": []
						},
						{
							"name": "Request a JWT token for ADMINISTRATOR 1 should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7709b55-1173-4bd0-a0c6-319afc62d0ee",
										"exec": [
											"pm.test(\"Status code is 412\", function () {",
											"    pm.response.to.have.status(412);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a85da618-0370-466b-b200-3bc006e38f6e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"emailAddress\": \"{{ADMINISTRATOR 1 emailAddress}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/token",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"token"
									]
								},
								"description": "Login should fail with no password"
							},
							"response": []
						},
						{
							"name": "Request a JWT token for ADMINISTRATOR 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7709b55-1173-4bd0-a0c6-319afc62d0ee",
										"exec": [
											"function jwt_decode(jwt) {",
											"    var parts = jwt.split('.');",
											"    return JSON.parse(atob(parts[1]));",
											"}",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"JSON Object has token property\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('token');",
											"});",
											"",
											"pm.test(\"JWT token has employee claim\", function () {",
											"    var jsonData = pm.response.json();",
											"    decodedToken = jwt_decode(jsonData.token);",
											"    pm.expect(decodedToken).to.have.property('employee');",
											"});",
											"",
											"pm.test(\"JWT token has expected firstName: \" + pm.environment.get(\"ADMINISTRATOR 1 firstName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    decodedToken = jwt_decode(jsonData.token);",
											"    pm.expect(decodedToken.employee.firstName).to.eql(pm.environment.get(\"ADMINISTRATOR 1 firstName\"));",
											"});",
											"",
											"pm.test(\"JWT token has expected lastName: \" + pm.environment.get(\"ADMINISTRATOR 1 lastName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    decodedToken = jwt_decode(jsonData.token);",
											"    pm.expect(decodedToken.employee.lastName).to.eql(pm.environment.get(\"ADMINISTRATOR 1 lastName\"));",
											"});",
											"",
											"pm.test(\"JWT token has expected emailAddress: \" + pm.environment.get(\"ADMINISTRATOR 1 emailAddress\"), function () {",
											"    var jsonData = pm.response.json();",
											"    decodedToken = jwt_decode(jsonData.token);",
											"    pm.expect(decodedToken.employee.emailAddress).to.eql(pm.environment.get(\"ADMINISTRATOR 1 emailAddress\"));",
											"});",
											"",
											"pm.test(\"JWT token has expected active: true\", function () {",
											"    var jsonData = pm.response.json();",
											"    decodedToken = jwt_decode(jsonData.token);",
											"    pm.expect(decodedToken.employee.active).to.eql(true);",
											"});",
											"",
											"pm.test(\"JWT token has expected role: ADMINISTRATOR\", function () {",
											"    var jsonData = pm.response.json();",
											"    decodedToken = jwt_decode(jsonData.token);",
											"    pm.expect(decodedToken.employee.role).to.eql(\"ADMINISTRATOR\");",
											"});",
											"",
											"pm.test(\"Save token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"ADMINISTRATOR 1 token\", jsonData.token);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a85da618-0370-466b-b200-3bc006e38f6e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"emailAddress\": \"{{ADMINISTRATOR 1 emailAddress}}\",\r\n  \"rawPassword\": \"{{ADMINISTRATOR 1 password}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/token",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create DEVELOPER 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c3d1d47f-9d85-4079-b81e-27ce18c93047",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f646481d-f33b-41d9-aa0e-e2aa2dba606d",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response has expected firstName: \" + pm.environment.get(\"DEVELOPER 1 firstName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.firstName).to.eql(pm.environment.get(\"DEVELOPER 1 firstName\"));",
											"});",
											"",
											"pm.test(\"Response has expected lastName: \" + pm.environment.get(\"DEVELOPER 1 lastName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.lastName).to.eql(pm.environment.get(\"DEVELOPER 1 lastName\"));",
											"});",
											"",
											"pm.test(\"Response has expected emailAddress: \" + pm.environment.get(\"DEVELOPER 1 emailAddress\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.emailAddress).to.eql(pm.environment.get(\"DEVELOPER 1 emailAddress\"));",
											"});",
											"",
											"pm.test(\"Response has expected active: true\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.active).to.eql(true);",
											"});",
											"",
											"pm.test(\"Response has expected role: DEVELOPER\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.role).to.eql(\"DEVELOPER\");",
											"});",
											"",
											"pm.test(\"Save id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"DEVELOPER 1 id\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"active\": true,\r\n  \"firstName\": \"{{DEVELOPER 1 firstName}}\",\r\n  \"lastName\": \"{{DEVELOPER 1 lastName}}\",\r\n  \"emailAddress\": \"{{DEVELOPER 1 emailAddress}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/employee?password={{DEVELOPER 1 password}}&role=DEVELOPER",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee"
									],
									"query": [
										{
											"key": "password",
											"value": "{{DEVELOPER 1 password}}"
										},
										{
											"key": "role",
											"value": "DEVELOPER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create PROJECTMANAGER 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c3d1d47f-9d85-4079-b81e-27ce18c93047",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f646481d-f33b-41d9-aa0e-e2aa2dba606d",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response has expected firstName: Wrong firstName\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.firstName).to.eql(\"Wrong firstName\");",
											"});",
											"",
											"pm.test(\"Response has expected lastName: \"+ pm.environment.get(\"PROJECTMANAGER 1 lastName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.lastName).to.eql(pm.environment.get(\"PROJECTMANAGER 1 lastName\"));",
											"});",
											"",
											"pm.test(\"Response has expected emailAddress: \"+ pm.environment.get(\"PROJECTMANAGER 1 emailAddress\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.emailAddress).to.eql(pm.environment.get(\"PROJECTMANAGER 1 emailAddress\"));",
											"});",
											"",
											"pm.test(\"Response has expected active\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.active).to.eql(true);",
											"});",
											"",
											"pm.test(\"Response has expected role: PROJECTMANAGER\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.role).to.eql(\"PROJECTMANAGER\");",
											"});",
											"",
											"pm.test(\"Save id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"PROJECTMANAGER 1 id\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ADMINISTRATOR 1 token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"active\": true,\r\n  \"firstName\": \"Wrong firstName\",\r\n  \"lastName\": \"{{PROJECTMANAGER 1 lastName}}\",\r\n  \"emailAddress\": \"{{PROJECTMANAGER 1 emailAddress}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/employee?password={{PROJECTMANAGER 1 password}}&role=PROJECTMANAGER",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee"
									],
									"query": [
										{
											"key": "password",
											"value": "{{PROJECTMANAGER 1 password}}"
										},
										{
											"key": "role",
											"value": "PROJECTMANAGER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create ADMINISTRATOR 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c3d1d47f-9d85-4079-b81e-27ce18c93047",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f646481d-f33b-41d9-aa0e-e2aa2dba606d",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response has expected firstName: \"+ pm.environment.get(\"ADMINISTRATOR 2 firstName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.firstName).to.eql(pm.environment.get(\"ADMINISTRATOR 2 firstName\"));",
											"});",
											"",
											"pm.test(\"Response has expected lastName: \"+ pm.environment.get(\"ADMINISTRATOR 2 lastName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.lastName).to.eql(pm.environment.get(\"ADMINISTRATOR 2 lastName\"));",
											"});",
											"",
											"pm.test(\"Response has expected emailAddress: \"+ pm.environment.get(\"ADMINISTRATOR 2 emailAddress\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.emailAddress).to.eql(pm.environment.get(\"ADMINISTRATOR 2 emailAddress\"));",
											"});",
											"",
											"pm.test(\"Response has expected active\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.active).to.eql(true);",
											"});",
											"",
											"pm.test(\"Response has expected role: ADMINISTRATOR\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.role).to.eql(\"ADMINISTRATOR\");",
											"});",
											"",
											"pm.test(\"Save id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"ADMINISTRATOR 2 id\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ADMINISTRATOR 1 token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"active\": true,\r\n  \"firstName\": \"{{ADMINISTRATOR 2 firstName}}\",\r\n  \"lastName\": \"{{ADMINISTRATOR 2 lastName}}\",\r\n  \"emailAddress\": \"{{ADMINISTRATOR 2 emailAddress}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/employee?password={{ADMINISTRATOR 2 password}}&role=ADMINISTRATOR",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee"
									],
									"query": [
										{
											"key": "password",
											"value": "{{ADMINISTRATOR 2 password}}"
										},
										{
											"key": "role",
											"value": "ADMINISTRATOR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update PROJECTMANAGER 1 should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3359f506-94fd-4535-bcbb-0f064c5320e3",
										"exec": [
											"pm.test(\"Status code is 412\", function () {",
											"    pm.response.to.have.status(412);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"active\": true,\r\n  \"firstName\": \"\",\r\n  \"lastName\": \"{{PROJECTMANAGER 1 lastName}}\",\r\n  \"emailAddress\": \"{{PROJECTMANAGER 1 emailAddress}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/employee/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{PROJECTMANAGER 1 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update PROJECTMANAGER 1 should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3359f506-94fd-4535-bcbb-0f064c5320e3",
										"exec": [
											"pm.test(\"Status code is 412\", function () {",
											"    pm.response.to.have.status(412);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"active\": true,\r\n  \"firstName\": \"{{PROJECTMANAGER 1 firstName}}\",\r\n  \"lastName\": \"Llanfairpwllgwyngyllgogerychwyrndrobwllllantysiliogogogoch\",\r\n  \"emailAddress\": \"{{PROJECTMANAGER 1 emailAddress}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/employee/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{PROJECTMANAGER 1 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update PROJECTMANAGER 1 should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3359f506-94fd-4535-bcbb-0f064c5320e3",
										"exec": [
											"pm.test(\"Status code is 412\", function () {",
											"    pm.response.to.have.status(412);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"active\": true,\r\n  \"firstName\": \"{{PROJECTMANAGER 1 firstName}}\",\r\n  \"lastName\": \"{{PROJECTMANAGER 1 lastName}}\",\r\n  \"emailAddress\": \"noAtInMail.com\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/employee/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{PROJECTMANAGER 1 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update PROJECTMANAGER 1 should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3359f506-94fd-4535-bcbb-0f064c5320e3",
										"exec": [
											"pm.test(\"Status code is 412\", function () {",
											"    pm.response.to.have.status(412);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"active\": true,\r\n  \"firstName\": \"{{PROJECTMANAGER 1 firstName}}\",\r\n  \"lastName\": \"{{PROJECTMANAGER 1 lastName}}\",\r\n  \"emailAddress\": \"llanfairpwllgwyngyllgogerychwyrndrobwllllantysiliogogogoch@Llanfairpwllgwyngyllgogerychwyrndrobwllllantysiliogogogoch.com\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/employee/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{PROJECTMANAGER 1 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update PROJECTMANAGER 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3359f506-94fd-4535-bcbb-0f064c5320e3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has expected firstName: \"+ pm.environment.get(\"PROJECTMANAGER 1 firstName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.firstName).to.eql(pm.environment.get(\"PROJECTMANAGER 1 firstName\"));",
											"});",
											"",
											"pm.test(\"Response has expected lastName: \"+ pm.environment.get(\"PROJECTMANAGER 1 lastName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.lastName).to.eql(pm.environment.get(\"PROJECTMANAGER 1 lastName\"));",
											"});",
											"",
											"pm.test(\"Response has expected emailAddress: \"+ pm.environment.get(\"PROJECTMANAGER 1 emailAddress\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.emailAddress).to.eql(pm.environment.get(\"PROJECTMANAGER 1 emailAddress\"));",
											"});",
											"",
											"pm.test(\"Response has expected active\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.active).to.eql(true);",
											"});",
											"",
											"pm.test(\"Response has expected role: PROJECTMANAGER\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.role).to.eql(\"PROJECTMANAGER\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"active\": true,\r\n  \"firstName\": \"{{PROJECTMANAGER 1 firstName}}\",\r\n  \"lastName\": \"{{PROJECTMANAGER 1 lastName}}\",\r\n  \"emailAddress\": \"{{PROJECTMANAGER 1 emailAddress}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/employee/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{PROJECTMANAGER 1 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update nonexistant employee should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3359f506-94fd-4535-bcbb-0f064c5320e3",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"active\": true,\r\n  \"firstName\": \"{{PROJECTMANAGER 1 firstName}}\",\r\n  \"lastName\": \"{{PROJECTMANAGER 1 lastName}}\",\r\n  \"emailAddress\": \"{{PROJECTMANAGER 1 emailAddress}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/employee/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1337"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Developers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1eb3ed49-bb37-442b-9175-6c55499edf20",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Developer employee list has expected length of 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Response has expected firstName: \" + pm.environment.get(\"DEVELOPER 1 firstName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].firstName).to.eql(pm.environment.get(\"DEVELOPER 1 firstName\"));",
											"});",
											"",
											"pm.test(\"Response has expected lastName: \" + pm.environment.get(\"DEVELOPER 1 lastName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].lastName).to.eql(pm.environment.get(\"DEVELOPER 1 lastName\"));",
											"});",
											"",
											"pm.test(\"Response has expected emailAddress: \" + pm.environment.get(\"DEVELOPER 1 emailAddress\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].emailAddress).to.eql(pm.environment.get(\"DEVELOPER 1 emailAddress\"));",
											"});",
											"",
											"pm.test(\"Response has expected active: true\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].active).to.eql(true);",
											"});",
											"",
											"pm.test(\"Response has expected role: DEVELOPER\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].role).to.eql(\"DEVELOPER\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/employee?role=DEVELOPER",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee"
									],
									"query": [
										{
											"key": "role",
											"value": "DEVELOPER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Project Managers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1eb3ed49-bb37-442b-9175-6c55499edf20",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Project manager employee list has expected length of 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Response has expected firstName: \"+ pm.environment.get(\"PROJECTMANAGER 1 firstName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].firstName).to.eql(pm.environment.get(\"PROJECTMANAGER 1 firstName\"));",
											"});",
											"",
											"pm.test(\"Response has expected lastName: \"+ pm.environment.get(\"PROJECTMANAGER 1 lastName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].lastName).to.eql(pm.environment.get(\"PROJECTMANAGER 1 lastName\"));",
											"});",
											"",
											"pm.test(\"Response has expected emailAddress: \"+ pm.environment.get(\"PROJECTMANAGER 1 emailAddress\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].emailAddress).to.eql(pm.environment.get(\"PROJECTMANAGER 1 emailAddress\"));",
											"});",
											"",
											"pm.test(\"Response has expected active\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].active).to.eql(true);",
											"});",
											"",
											"pm.test(\"Response has expected role: PROJECTMANAGER\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].role).to.eql(\"PROJECTMANAGER\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/employee?role=PROJECTMANAGER",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee"
									],
									"query": [
										{
											"key": "role",
											"value": "PROJECTMANAGER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check if DEVELOPER 1 is here",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ed593d2-9473-4b03-a3e4-85261c3a2dbf",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has expected firstName: \" + pm.environment.get(\"DEVELOPER 1 firstName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.firstName).to.eql(pm.environment.get(\"DEVELOPER 1 firstName\"));",
											"});",
											"",
											"pm.test(\"Response has expected lastName: \" + pm.environment.get(\"DEVELOPER 1 lastName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.lastName).to.eql(pm.environment.get(\"DEVELOPER 1 lastName\"));",
											"});",
											"",
											"pm.test(\"Response has expected emailAddress: \" + pm.environment.get(\"DEVELOPER 1 emailAddress\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.emailAddress).to.eql(pm.environment.get(\"DEVELOPER 1 emailAddress\"));",
											"});",
											"",
											"pm.test(\"Response has expected active: true\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.active).to.eql(true);",
											"});",
											"",
											"pm.test(\"Response has expected role: DEVELOPER\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.role).to.eql(\"DEVELOPER\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/employee/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{DEVELOPER 1 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Contract 1 for DEVELOPER 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8cc344b8-1169-498b-a1ba-5a0bf3b43a1d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1d7ed2bb-b222-4f48-a070-725445dbac57",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response has expected startDate: \" + pm.environment.get(\"twoMonthsBack\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.startDate).to.eql(pm.environment.get(\"twoMonthsBack\"));",
											"});",
											"",
											"pm.test(\"Response has expected endDate: \" + pm.environment.get(\"inNineMonths\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.endDate).to.eql(pm.environment.get(\"inNineMonths\"));",
											"});",
											"",
											"pm.test(\"Response has expected pensumPercentage: 80\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pensumPercentage).to.eql(80);",
											"});",
											"",
											"pm.test(\"Response has expected employeeId: \" + pm.environment.get(\"DEVELOPER 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.employeeId).to.eql(pm.environment.get(\"DEVELOPER 1 id\"));",
											"});",
											"",
											"",
											"pm.test(\"Save id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"DEVELOPER 1 Contract 1 id\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{twoMonthsBack}}\",\r\n  \"endDate\": \"{{inNineMonths}}\",\r\n  \"pensumPercentage\": 80,\r\n  \"employeeId\": \"{{DEVELOPER 1 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/contract",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"contract"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Contract for DEVELOPER 1 should fail",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8cc344b8-1169-498b-a1ba-5a0bf3b43a1d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1d7ed2bb-b222-4f48-a070-725445dbac57",
										"exec": [
											"pm.test(\"Status code is 412\", function () {",
											"    pm.response.to.have.status(412);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{inEightMonths}}\",\r\n  \"endDate\": \"{{inElevenMonths}}\",\r\n  \"pensumPercentage\": 100,\r\n  \"employeeId\": \"{{DEVELOPER 1 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/contract",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"contract"
									]
								},
								"description": "Should fail because this Contract overlaps with existing Contract 1"
							},
							"response": []
						},
						{
							"name": "Get all contracts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14658db7-0568-4c60-93f7-0ddd6a96bcf8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Contract list has expected length of 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Response has expected startDate: \" + pm.environment.get(\"twoMonthsBack\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].startDate).to.eql(pm.environment.get(\"twoMonthsBack\"));",
											"});",
											"",
											"pm.test(\"Response has expected endDate: \" + pm.environment.get(\"inNineMonths\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].endDate).to.eql(pm.environment.get(\"inNineMonths\"));",
											"});",
											"",
											"pm.test(\"Response has expected pensumPercentage: 80\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].pensumPercentage).to.eql(80);",
											"});",
											"",
											"pm.test(\"Response has expected employeeId: \" + pm.environment.get(\"DEVELOPER 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].employeeId).to.eql(pm.environment.get(\"DEVELOPER 1 id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/contract?",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"contract"
									],
									"query": [
										{
											"key": "fromDate",
											"value": "{{fromDate}}",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "{{toDate}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update contract 1 of DEVELOPER 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e78a8665-9dd0-4ce3-90c3-4376bd30e37b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has expected id: \" + pm.environment.get(\"DEVELOPER 1 Contract 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"DEVELOPER 1 Contract 1 id\"));",
											"});",
											"",
											"pm.test(\"Response has expected startDate: \" + pm.environment.get(\"twoMonthsBack\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.startDate).to.eql(pm.environment.get(\"twoMonthsBack\"));",
											"});",
											"",
											"pm.test(\"Response has expected endDate: \" + pm.environment.get(\"inTenMonths\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.endDate).to.eql(pm.environment.get(\"inTenMonths\"));",
											"});",
											"",
											"pm.test(\"Response has expected pensumPercentage: 80\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pensumPercentage).to.eql(80);",
											"});",
											"",
											"pm.test(\"Response has expected employeeId: \" + pm.environment.get(\"DEVELOPER 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.employeeId).to.eql(pm.environment.get(\"DEVELOPER 1 id\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{twoMonthsBack}}\",\r\n  \"endDate\": \"{{inTenMonths}}\",\r\n  \"pensumPercentage\": 80,\r\n  \"employeeId\": \"{{DEVELOPER 1 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/contract/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"contract",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{DEVELOPER 1 Contract 1 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check updated contract 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7f24a45-2d73-4f37-9a02-07739ef7f6c6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has expected id: \" + pm.environment.get(\"DEVELOPER 1 Contract 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"DEVELOPER 1 Contract 1 id\"));",
											"});",
											"",
											"pm.test(\"Response has expected startDate: \" + pm.environment.get(\"twoMonthsBack\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.startDate).to.eql(pm.environment.get(\"twoMonthsBack\"));",
											"});",
											"",
											"pm.test(\"Response has expected endDate: \" + pm.environment.get(\"inTenMonths\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.endDate).to.eql(pm.environment.get(\"inTenMonths\"));",
											"});",
											"",
											"pm.test(\"Response has expected pensumPercentage: 80\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pensumPercentage).to.eql(80);",
											"});",
											"",
											"pm.test(\"Response has expected employeeId: \" + pm.environment.get(\"DEVELOPER 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.employeeId).to.eql(pm.environment.get(\"DEVELOPER 1 id\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/contract/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"contract",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{DEVELOPER 1 Contract 1 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new project 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ac4eb02e-5a8c-45e6-83d8-2930195ae609",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4a6a2e57-18c2-4d58-bd3a-5b96e8957eca",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response has expected name: Project 1: Testing\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.eql(\"Project 1: Testing\");",
											"});",
											"",
											"pm.test(\"Response has expected startDate: \" + pm.environment.get(\"today\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.startDate).to.eql(pm.environment.get(\"today\"));",
											"});",
											"",
											"pm.test(\"Response has expected endDate: \" + pm.environment.get(\"inTwelveMonths\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.endDate).to.eql(pm.environment.get(\"inTwelveMonths\"));",
											"});",
											"",
											"pm.test(\"Response has expected ftePercentage: 1500\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.ftePercentage).to.eql(1500);",
											"});",
											"",
											"pm.test(\"Response has expected projectManagerId: \" + pm.environment.get(\"PROJECTMANAGER 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.projectManagerId).to.eql(pm.environment.get(\"PROJECTMANAGER 1 id\"));",
											"});",
											"",
											"pm.test(\"Save id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"Project 1 id\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Project 1: Testing\",\r\n  \"ftePercentage\": 1500,\r\n  \"startDate\": \"{{today}}\",\r\n  \"endDate\": \"{{inTwelveMonths}}\",\r\n  \"projectManagerId\": \"{{PROJECTMANAGER 1 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/project",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all projects",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "624e625a-0876-4572-a48f-652949a87046",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Project list has expected length of 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Response has expected id: \" + pm.environment.get(\"Project 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].id).to.eql(pm.environment.get(\"Project 1 id\"));",
											"});",
											"",
											"pm.test(\"Response has expected name: Project 1: Testing\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].name).to.eql(\"Project 1: Testing\");",
											"});",
											"",
											"pm.test(\"Response has expected startDate: \" + pm.environment.get(\"today\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].startDate).to.eql(pm.environment.get(\"today\"));",
											"});",
											"",
											"pm.test(\"Response has expected endDate: \" + pm.environment.get(\"inTwelveMonths\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].endDate).to.eql(pm.environment.get(\"inTwelveMonths\"));",
											"});",
											"",
											"pm.test(\"Response has expected ftePercentage: 1500\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].ftePercentage).to.eql(1500);",
											"});",
											"",
											"pm.test(\"Response has expected projectManagerId: \" + pm.environment.get(\"PROJECTMANAGER 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].projectManagerId).to.eql(pm.environment.get(\"PROJECTMANAGER 1 id\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/project?",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"project"
									],
									"query": [
										{
											"key": "projectManagerId",
											"value": "{{projectManagerId}}",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "{{fromDate}}",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "{{toDate}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create PROJECTMANAGER 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c3d1d47f-9d85-4079-b81e-27ce18c93047",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f646481d-f33b-41d9-aa0e-e2aa2dba606d",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response has expected firstName: \"+ pm.environment.get(\"PROJECTMANAGER 2 firstName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.firstName).to.eql(pm.environment.get(\"PROJECTMANAGER 2 firstName\"));",
											"});",
											"",
											"pm.test(\"Response has expected lastName: \"+ pm.environment.get(\"PROJECTMANAGER 2 lastName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.lastName).to.eql(pm.environment.get(\"PROJECTMANAGER 2 lastName\"));",
											"});",
											"",
											"pm.test(\"Response has expected emailAddress: \"+ pm.environment.get(\"PROJECTMANAGER 2 emailAddress\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.emailAddress).to.eql(pm.environment.get(\"PROJECTMANAGER 2 emailAddress\"));",
											"});",
											"",
											"pm.test(\"Response has expected active\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.active).to.eql(true);",
											"});",
											"",
											"pm.test(\"Response has expected role: PROJECTMANAGER\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.role).to.eql(\"PROJECTMANAGER\");",
											"});",
											"",
											"pm.test(\"Save id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"PROJECTMANAGER 2 id\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ADMINISTRATOR 1 token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"active\": true,\r\n  \"firstName\": \"{{PROJECTMANAGER 2 firstName}}\",\r\n  \"lastName\": \"{{PROJECTMANAGER 2 lastName}}\",\r\n  \"emailAddress\": \"{{PROJECTMANAGER 2 emailAddress}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/employee?password={{PROJECTMANAGER 2 password}}&role=PROJECTMANAGER",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee"
									],
									"query": [
										{
											"key": "password",
											"value": "{{PROJECTMANAGER 2 password}}"
										},
										{
											"key": "role",
											"value": "PROJECTMANAGER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create DEVELOPER 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c3d1d47f-9d85-4079-b81e-27ce18c93047",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f646481d-f33b-41d9-aa0e-e2aa2dba606d",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response has expected firstName: \" + pm.environment.get(\"DEVELOPER 2 firstName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.firstName).to.eql(pm.environment.get(\"DEVELOPER 2 firstName\"));",
											"});",
											"",
											"pm.test(\"Response has expected lastName: \" + pm.environment.get(\"DEVELOPER 2 lastName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.lastName).to.eql(pm.environment.get(\"DEVELOPER 2 lastName\"));",
											"});",
											"",
											"pm.test(\"Response has expected emailAddress: \" + pm.environment.get(\"DEVELOPER 2 emailAddress\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.emailAddress).to.eql(pm.environment.get(\"DEVELOPER 2 emailAddress\"));",
											"});",
											"",
											"pm.test(\"Response has expected active: true\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.active).to.eql(true);",
											"});",
											"",
											"pm.test(\"Response has expected role: DEVELOPER\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.role).to.eql(\"DEVELOPER\");",
											"});",
											"",
											"pm.test(\"Save id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"DEVELOPER 2 id\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"active\": true,\r\n  \"firstName\": \"{{DEVELOPER 2 firstName}}\",\r\n  \"lastName\": \"{{DEVELOPER 2 lastName}}\",\r\n  \"emailAddress\": \"{{DEVELOPER 2 emailAddress}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/employee?password={{DEVELOPER 2 password}}&role=DEVELOPER",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee"
									],
									"query": [
										{
											"key": "password",
											"value": "{{DEVELOPER 2 password}}"
										},
										{
											"key": "role",
											"value": "DEVELOPER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Contract 1 for DEVELOPER 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8cc344b8-1169-498b-a1ba-5a0bf3b43a1d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1d7ed2bb-b222-4f48-a070-725445dbac57",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response has expected startDate: \" + pm.environment.get(\"fourMonthsBack\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.startDate).to.eql(pm.environment.get(\"fourMonthsBack\"));",
											"});",
											"",
											"pm.test(\"Response has expected endDate: \" + pm.environment.get(\"inTwoMonths\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.endDate).to.eql(pm.environment.get(\"inTwoMonths\"));",
											"});",
											"",
											"pm.test(\"Response has expected pensumPercentage: 100\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pensumPercentage).to.eql(100);",
											"});",
											"",
											"pm.test(\"Response has expected employeeId: \" + pm.environment.get(\"DEVELOPER 2 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.employeeId).to.eql(pm.environment.get(\"DEVELOPER 2 id\"));",
											"});",
											"",
											"",
											"pm.test(\"Save id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"DEVELOPER 2 Contract 1 id\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{fourMonthsBack}}\",\r\n  \"endDate\": \"{{inTwoMonths}}\",\r\n  \"pensumPercentage\": 100,\r\n  \"employeeId\": \"{{DEVELOPER 2 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/contract",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"contract"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Contract 2 for DEVELOPER 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8cc344b8-1169-498b-a1ba-5a0bf3b43a1d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1d7ed2bb-b222-4f48-a070-725445dbac57",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response has expected startDate: \" + pm.environment.get(\"inSixMonths\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.startDate).to.eql(pm.environment.get(\"inSixMonths\"));",
											"});",
											"",
											"pm.test(\"Response has expected endDate: \" + pm.environment.get(\"inNineMonths\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.endDate).to.eql(pm.environment.get(\"inNineMonths\"));",
											"});",
											"",
											"pm.test(\"Response has expected pensumPercentage: 80\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pensumPercentage).to.eql(80);",
											"});",
											"",
											"pm.test(\"Response has expected employeeId: \" + pm.environment.get(\"DEVELOPER 2 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.employeeId).to.eql(pm.environment.get(\"DEVELOPER 2 id\"));",
											"});",
											"",
											"",
											"pm.test(\"Save id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"DEVELOPER 2 Contract 2 id\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{inSixMonths}}\",\r\n  \"endDate\": \"{{inNineMonths}}\",\r\n  \"pensumPercentage\": 80,\r\n  \"employeeId\": \"{{DEVELOPER 2 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/contract",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"contract"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create DEVELOPER 3",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c3d1d47f-9d85-4079-b81e-27ce18c93047",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f646481d-f33b-41d9-aa0e-e2aa2dba606d",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response has expected firstName: \" + pm.environment.get(\"DEVELOPER 3 firstName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.firstName).to.eql(pm.environment.get(\"DEVELOPER 3 firstName\"));",
											"});",
											"",
											"pm.test(\"Response has expected lastName: \" + pm.environment.get(\"DEVELOPER 3 lastName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.lastName).to.eql(pm.environment.get(\"DEVELOPER 3 lastName\"));",
											"});",
											"",
											"pm.test(\"Response has expected emailAddress: \" + pm.environment.get(\"DEVELOPER 3 emailAddress\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.emailAddress).to.eql(pm.environment.get(\"DEVELOPER 3 emailAddress\"));",
											"});",
											"",
											"pm.test(\"Response has expected active: true\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.active).to.eql(true);",
											"});",
											"",
											"pm.test(\"Response has expected role: DEVELOPER\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.role).to.eql(\"DEVELOPER\");",
											"});",
											"",
											"pm.test(\"Save id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"DEVELOPER 3 id\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"active\": true,\r\n  \"firstName\": \"{{DEVELOPER 3 firstName}}\",\r\n  \"lastName\": \"{{DEVELOPER 3 lastName}}\",\r\n  \"emailAddress\": \"{{DEVELOPER 3 emailAddress}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/employee?password={{DEVELOPER 3 password}}&role=DEVELOPER",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee"
									],
									"query": [
										{
											"key": "password",
											"value": "{{DEVELOPER 3 password}}"
										},
										{
											"key": "role",
											"value": "DEVELOPER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create DEVELOPER 3 shloud fail",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c3d1d47f-9d85-4079-b81e-27ce18c93047",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f646481d-f33b-41d9-aa0e-e2aa2dba606d",
										"exec": [
											"pm.test(\"Status code is 412\", function () {",
											"    pm.response.to.have.status(412);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"active\": true,\r\n  \"firstName\": \"{{DEVELOPER 3 firstName}}\",\r\n  \"lastName\": \"{{DEVELOPER 3 lastName}}\",\r\n  \"emailAddress\": \"{{DEVELOPER 3 emailAddress}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/employee?password={{DEVELOPER 3 password}}&role=DEVELOPER",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee"
									],
									"query": [
										{
											"key": "password",
											"value": "{{DEVELOPER 3 password}}"
										},
										{
											"key": "role",
											"value": "DEVELOPER"
										}
									]
								},
								"description": "Should fail because emailAddress is already taken"
							},
							"response": []
						},
						{
							"name": "Create Contract 1 for DEVELOPER 3",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8cc344b8-1169-498b-a1ba-5a0bf3b43a1d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1d7ed2bb-b222-4f48-a070-725445dbac57",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response has expected startDate: \" + pm.environment.get(\"twoMonthsBack\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.startDate).to.eql(pm.environment.get(\"twoMonthsBack\"));",
											"});",
											"",
											"pm.test(\"Response has expected endDate: \" + pm.environment.get(\"inFiveMonths\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.endDate).to.eql(pm.environment.get(\"inFiveMonths\"));",
											"});",
											"",
											"pm.test(\"Response has expected pensumPercentage: 50\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pensumPercentage).to.eql(50);",
											"});",
											"",
											"pm.test(\"Response has expected employeeId: \" + pm.environment.get(\"DEVELOPER 3 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.employeeId).to.eql(pm.environment.get(\"DEVELOPER 3 id\"));",
											"});",
											"",
											"",
											"pm.test(\"Save id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"DEVELOPER 3 Contract 1 id\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{twoMonthsBack}}\",\r\n  \"endDate\": \"{{inFiveMonths}}\",\r\n  \"pensumPercentage\": 50,\r\n  \"employeeId\": \"{{DEVELOPER 3 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/contract",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"contract"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new project 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ac4eb02e-5a8c-45e6-83d8-2930195ae609",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4a6a2e57-18c2-4d58-bd3a-5b96e8957eca",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response has expected name: Some more testing\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.eql(\"Some more testing\");",
											"});",
											"",
											"pm.test(\"Response has expected startDate: \" + pm.environment.get(\"eightMonthsBack\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.startDate).to.eql(pm.environment.get(\"eightMonthsBack\"));",
											"});",
											"",
											"pm.test(\"Response has expected endDate: \" + pm.environment.get(\"inSixMonths\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.endDate).to.eql(pm.environment.get(\"inSixMonths\"));",
											"});",
											"",
											"pm.test(\"Response has expected ftePercentage: 100\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.ftePercentage).to.eql(100);",
											"});",
											"",
											"pm.test(\"Response has expected projectManagerId: \" + pm.environment.get(\"PROJECTMANAGER 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.projectManagerId).to.eql(pm.environment.get(\"PROJECTMANAGER 1 id\"));",
											"});",
											"",
											"pm.test(\"Save id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"Project 2 id\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Some more testing\",\r\n  \"ftePercentage\": 100,\r\n  \"startDate\": \"{{eightMonthsBack}}\",\r\n  \"endDate\": \"{{inSixMonths}}\",\r\n  \"projectManagerId\": \"{{PROJECTMANAGER 1 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/project",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new project should fail",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ac4eb02e-5a8c-45e6-83d8-2930195ae609",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4a6a2e57-18c2-4d58-bd3a-5b96e8957eca",
										"exec": [
											"pm.test(\"Status code is 412\", function () {",
											"    pm.response.to.have.status(412);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Failed project\",\r\n  \"ftePercentage\": 345,\r\n  \"startDate\": \"{{today}}\",\r\n  \"endDate\": \"{{inTwelveMonths}}\",\r\n  \"projectManagerId\": \"{{Nonexisting PROJECTMANAGER id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/project",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"project"
									]
								},
								"description": "Shloud fail because projectManagerId does not exist"
							},
							"response": []
						},
						{
							"name": "Create Allocation 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8deaa12a-3040-42ff-b96d-3ca93f3b3be9",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response has expected startDate: \" + pm.environment.get(\"today\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.startDate).to.eql(pm.environment.get(\"today\"));",
											"});",
											"",
											"pm.test(\"Response has expected endDate: \" + pm.environment.get(\"inThreeMonths\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.endDate).to.eql(pm.environment.get(\"inThreeMonths\"));",
											"});",
											"",
											"pm.test(\"Response has expected pensumPercentage: 30\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pensumPercentage).to.eql(30);",
											"});",
											"",
											"pm.test(\"Response has expected contractId: \" + pm.environment.get(\"DEVELOPER 1 Contract 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.contractId).to.eql(pm.environment.get(\"DEVELOPER 1 Contract 1 id\"));",
											"});",
											"",
											"pm.test(\"Response has expected projectId: \" + pm.environment.get(\"Project 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.projectId).to.eql(pm.environment.get(\"Project 1 id\"));",
											"});",
											"",
											"pm.test(\"Save id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"Allocation 1 id\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{today}}\",\r\n  \"endDate\": \"{{inThreeMonths}}\",\r\n  \"pensumPercentage\": 30,\r\n  \"contractId\": \"{{DEVELOPER 1 Contract 1 id}}\",\r\n  \"projectId\": \"{{Project 1 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/allocation",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									]
								},
								"description": "ADMINISTRATORS can create allocations for every project, PROJECTMANAGER for their own projects and DEVELOPER for none"
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{ADMINISTRATOR 1 token}}",
								"type": "string"
							}
						]
					},
					"_postman_isSubFolder": true
				},
				{
					"name": "with PROJECTMANAGER 1",
					"item": [
						{
							"name": "Request a JWT token for PROJECTMANAGER 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7709b55-1173-4bd0-a0c6-319afc62d0ee",
										"exec": [
											"function jwt_decode(jwt) {",
											"    var parts = jwt.split('.');",
											"    return JSON.parse(atob(parts[1]));",
											"}",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"JSON Object has token property\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('token');",
											"});",
											"",
											"pm.test(\"JWT token has employee claim\", function () {",
											"    var jsonData = pm.response.json();",
											"    decodedToken = jwt_decode(jsonData.token);",
											"    pm.expect(decodedToken).to.have.property('employee');",
											"});",
											"",
											"pm.test(\"JWT token has expected firstName: \" + pm.environment.get(\"PROJECTMANAGER 1 firstName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    decodedToken = jwt_decode(jsonData.token);",
											"    pm.expect(decodedToken.employee.firstName).to.eql(pm.environment.get(\"PROJECTMANAGER 1 firstName\"));",
											"});",
											"",
											"pm.test(\"JWT token has expected lastName: \" + pm.environment.get(\"PROJECTMANAGER 1 lastName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    decodedToken = jwt_decode(jsonData.token);",
											"    pm.expect(decodedToken.employee.lastName).to.eql(pm.environment.get(\"PROJECTMANAGER 1 lastName\"));",
											"});",
											"",
											"pm.test(\"JWT token has expected emailAddress: \" + pm.environment.get(\"PROJECTMANAGER 1 emailAddress\"), function () {",
											"    var jsonData = pm.response.json();",
											"    decodedToken = jwt_decode(jsonData.token);",
											"    pm.expect(decodedToken.employee.emailAddress).to.eql(pm.environment.get(\"PROJECTMANAGER 1 emailAddress\"));",
											"});",
											"",
											"pm.test(\"JWT token has expected active: true\", function () {",
											"    var jsonData = pm.response.json();",
											"    decodedToken = jwt_decode(jsonData.token);",
											"    pm.expect(decodedToken.employee.active).to.eql(true);",
											"});",
											"",
											"pm.test(\"JWT token has expected role: PROJECTMANAGER \", function () {",
											"    var jsonData = pm.response.json();",
											"    decodedToken = jwt_decode(jsonData.token);",
											"    pm.expect(decodedToken.employee.role).to.eql(\"PROJECTMANAGER\");",
											"});",
											"",
											"pm.test(\"Save token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"PROJECTMANAGER 1 token\", jsonData.token);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a85da618-0370-466b-b200-3bc006e38f6e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"emailAddress\": \"{{PROJECTMANAGER 1 emailAddress}}\",\r\n  \"rawPassword\": \"{{PROJECTMANAGER 1 password}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/token",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create DEVELOPER 1 should fail",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c3d1d47f-9d85-4079-b81e-27ce18c93047",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f646481d-f33b-41d9-aa0e-e2aa2dba606d",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"active\": true,\r\n  \"firstName\": \"{{DEVELOPER 1 firstName}}\",\r\n  \"lastName\": \"{{DEVELOPER 1 lastName}}\",\r\n  \"emailAddress\": \"{{DEVELOPER 1 emailAddress}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/employee?password={{DEVELOPER 1 password}}&role=DEVELOPER",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee"
									],
									"query": [
										{
											"key": "password",
											"value": "{{DEVELOPER 1 password}}"
										},
										{
											"key": "role",
											"value": "DEVELOPER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create PROJECTMANAGER 1 should fail",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c3d1d47f-9d85-4079-b81e-27ce18c93047",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f646481d-f33b-41d9-aa0e-e2aa2dba606d",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ADMINISTRATOR 1 token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"active\": true,\r\n  \"firstName\": \"Wrong firstName\",\r\n  \"lastName\": \"{{PROJECTMANAGER 1 lastName}}\",\r\n  \"emailAddress\": \"{{PROJECTMANAGER 1 emailAddress}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/employee?password={{PROJECTMANAGER 1 password}}&role=PROJECTMANAGER",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee"
									],
									"query": [
										{
											"key": "password",
											"value": "{{PROJECTMANAGER 1 password}}"
										},
										{
											"key": "role",
											"value": "PROJECTMANAGER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update PROJECTMANAGER 1 should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3359f506-94fd-4535-bcbb-0f064c5320e3",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"active\": true,\r\n  \"firstName\": \"{{PROJECTMANAGER 1 firstName}}\",\r\n  \"lastName\": \"{{PROJECTMANAGER 1 lastName}}\",\r\n  \"emailAddress\": \"{{PROJECTMANAGER 1 emailAddress}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/employee/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{PROJECTMANAGER 1 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Developers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1eb3ed49-bb37-442b-9175-6c55499edf20",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Developer employee list has expected length of 3\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(3);",
											"});",
											"",
											"pm.test(\"Response has expected role: DEVELOPER\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].role).to.eql(\"DEVELOPER\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/employee?role=DEVELOPER",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee"
									],
									"query": [
										{
											"key": "role",
											"value": "DEVELOPER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Project Managers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1eb3ed49-bb37-442b-9175-6c55499edf20",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Project manager employee list has expected length of 2\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Response has expected role: PROJECTMANAGER\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].role).to.eql(\"PROJECTMANAGER\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/employee?role=PROJECTMANAGER",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee"
									],
									"query": [
										{
											"key": "role",
											"value": "PROJECTMANAGER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check if DEVELOPER 1 is here",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ed593d2-9473-4b03-a3e4-85261c3a2dbf",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has expected firstName: \" + pm.environment.get(\"DEVELOPER 1 firstName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.firstName).to.eql(pm.environment.get(\"DEVELOPER 1 firstName\"));",
											"});",
											"",
											"pm.test(\"Response has expected lastName: \" + pm.environment.get(\"DEVELOPER 1 lastName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.lastName).to.eql(pm.environment.get(\"DEVELOPER 1 lastName\"));",
											"});",
											"",
											"pm.test(\"Response has expected emailAddress: \" + pm.environment.get(\"DEVELOPER 1 emailAddress\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.emailAddress).to.eql(pm.environment.get(\"DEVELOPER 1 emailAddress\"));",
											"});",
											"",
											"pm.test(\"Response has expected active: true\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.active).to.eql(true);",
											"});",
											"",
											"pm.test(\"Response has expected role: DEVELOPER\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.role).to.eql(\"DEVELOPER\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/employee/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{DEVELOPER 1 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Contract 1 for DEVELOPER 1 should fail",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8cc344b8-1169-498b-a1ba-5a0bf3b43a1d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1d7ed2bb-b222-4f48-a070-725445dbac57",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{twoMonthsBack}}\",\r\n  \"endDate\": \"{{inNineMonths}}\",\r\n  \"pensumPercentage\": 100,\r\n  \"employeeId\": \"{{DEVELOPER 1 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/contract",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"contract"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all contracts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14658db7-0568-4c60-93f7-0ddd6a96bcf8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Contract list has expected length of 4\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(4);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/contract?",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"contract"
									],
									"query": [
										{
											"key": "fromDate",
											"value": "{{fromDate}}",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "{{toDate}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update contract 1 of DEVELOPER 1 should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e78a8665-9dd0-4ce3-90c3-4376bd30e37b",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{twoMonthsBack}}\",\r\n  \"endDate\": \"{{inTenMonths}}\",\r\n  \"pensumPercentage\": 80,\r\n  \"employeeId\": \"{{DEVELOPER 1 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/contract/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"contract",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{DEVELOPER 1 Contract 1 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new project should fail",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ac4eb02e-5a8c-45e6-83d8-2930195ae609",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4a6a2e57-18c2-4d58-bd3a-5b96e8957eca",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Project 1: Testing\",\r\n  \"ftePercentage\": 1500,\r\n  \"startDate\": \"{{today}}\",\r\n  \"endDate\": \"{{inTwelveMonths}}\",\r\n  \"projectManagerId\": \"{{PROJECTMANAGER 1 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/project",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all projects",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "624e625a-0876-4572-a48f-652949a87046",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Project list has expected length of 2\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/project?",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"project"
									],
									"query": [
										{
											"key": "projectManagerId",
											"value": "{{projectManagerId}}",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "{{fromDate}}",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "{{toDate}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Allocation 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "339e1a87-b183-4a6d-9443-b0d83e26fba1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has expected id: \" + pm.environment.get(\"Allocation 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"Allocation 1 id\"));",
											"});",
											"",
											"pm.test(\"Response has expected startDate: \" + pm.environment.get(\"today\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.startDate).to.eql(pm.environment.get(\"today\"));",
											"});",
											"",
											"pm.test(\"Response has expected endDate: \" + pm.environment.get(\"inFourMonths\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.endDate).to.eql(pm.environment.get(\"inFourMonths\"));",
											"});",
											"",
											"pm.test(\"Response has expected pensumPercentage: 40\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pensumPercentage).to.eql(40);",
											"});",
											"",
											"pm.test(\"Response has expected contractId: \" + pm.environment.get(\"DEVELOPER 1 Contract 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.contractId).to.eql(pm.environment.get(\"DEVELOPER 1 Contract 1 id\"));",
											"});",
											"",
											"pm.test(\"Response has expected projectId: \" + pm.environment.get(\"Project 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.projectId).to.eql(pm.environment.get(\"Project 1 id\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{today}}\",\r\n  \"endDate\": \"{{inFourMonths}}\",\r\n  \"pensumPercentage\": 40,\r\n  \"contractId\": \"{{DEVELOPER 1 Contract 1 id}}\",\r\n  \"projectId\": \"{{Project 1 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/allocation/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{Allocation 1 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Allocation 11 should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8deaa12a-3040-42ff-b96d-3ca93f3b3be9",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{fourMonthsBack}}\",\r\n  \"endDate\": \"{{twoMonthsBack}}\",\r\n  \"pensumPercentage\": 20,\r\n  \"contractId\": \"{{Nonexisting Contract id}}\",\r\n  \"projectId\": \"{{Project 2 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/allocation",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									]
								},
								"description": "Sould fail because contractId does not exist"
							},
							"response": []
						},
						{
							"name": "Create Allocation 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8deaa12a-3040-42ff-b96d-3ca93f3b3be9",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response has expected startDate: \" + pm.environment.get(\"today\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.startDate).to.eql(pm.environment.get(\"today\"));",
											"});",
											"",
											"pm.test(\"Response has expected endDate: \" + pm.environment.get(\"inTwoMonths\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.endDate).to.eql(pm.environment.get(\"inTwoMonths\"));",
											"});",
											"",
											"pm.test(\"Response has expected pensumPercentage: 50\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pensumPercentage).to.eql(50);",
											"});",
											"",
											"pm.test(\"Response has expected contractId: \" + pm.environment.get(\"DEVELOPER 2 Contract 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.contractId).to.eql(pm.environment.get(\"DEVELOPER 2 Contract 1 id\"));",
											"});",
											"",
											"pm.test(\"Response has expected projectId: \" + pm.environment.get(\"Project 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.projectId).to.eql(pm.environment.get(\"Project 1 id\"));",
											"});",
											"",
											"pm.test(\"Save id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"Allocation 2 id\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{today}}\",\r\n  \"endDate\": \"{{inTwoMonths}}\",\r\n  \"pensumPercentage\": 50,\r\n  \"contractId\": \"{{DEVELOPER 2 Contract 1 id}}\",\r\n  \"projectId\": \"{{Project 1 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/allocation",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									]
								},
								"description": "ADMINISTRATORS can create allocations for every project, PROJECTMANAGER for their own projects and DEVELOPER for none"
							},
							"response": []
						},
						{
							"name": "Create Allocation 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8deaa12a-3040-42ff-b96d-3ca93f3b3be9",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response has expected startDate: \" + pm.environment.get(\"today\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.startDate).to.eql(pm.environment.get(\"today\"));",
											"});",
											"",
											"pm.test(\"Response has expected endDate: \" + pm.environment.get(\"inTwoMonths\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.endDate).to.eql(pm.environment.get(\"inTwoMonths\"));",
											"});",
											"",
											"pm.test(\"Response has expected pensumPercentage: 40\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pensumPercentage).to.eql(40);",
											"});",
											"",
											"pm.test(\"Response has expected contractId: \" + pm.environment.get(\"DEVELOPER 3 Contract 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.contractId).to.eql(pm.environment.get(\"DEVELOPER 3 Contract 1 id\"));",
											"});",
											"",
											"pm.test(\"Response has expected projectId: \" + pm.environment.get(\"Project 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.projectId).to.eql(pm.environment.get(\"Project 1 id\"));",
											"});",
											"",
											"pm.test(\"Save id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"Allocation 3 id\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{today}}\",\r\n  \"endDate\": \"{{inTwoMonths}}\",\r\n  \"pensumPercentage\": 40,\r\n  \"contractId\": \"{{DEVELOPER 3 Contract 1 id}}\",\r\n  \"projectId\": \"{{Project 1 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/allocation",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									]
								},
								"description": "ADMINISTRATORS can create allocations for every project, PROJECTMANAGER for their own projects and DEVELOPER for none"
							},
							"response": []
						},
						{
							"name": "Create Allocation 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8deaa12a-3040-42ff-b96d-3ca93f3b3be9",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response has expected startDate: \" + pm.environment.get(\"today\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.startDate).to.eql(pm.environment.get(\"today\"));",
											"});",
											"",
											"pm.test(\"Response has expected endDate: \" + pm.environment.get(\"inTwoMonthsAndOneDay\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.endDate).to.eql(pm.environment.get(\"inTwoMonthsAndOneDay\"));",
											"});",
											"",
											"pm.test(\"Response has expected pensumPercentage: 20\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pensumPercentage).to.eql(20);",
											"});",
											"",
											"pm.test(\"Response has expected contractId: \" + pm.environment.get(\"DEVELOPER 3 Contract 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.contractId).to.eql(pm.environment.get(\"DEVELOPER 3 Contract 1 id\"));",
											"});",
											"",
											"pm.test(\"Response has expected projectId: \" + pm.environment.get(\"Project 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.projectId).to.eql(pm.environment.get(\"Project 1 id\"));",
											"});",
											"",
											"pm.test(\"Save id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"Allocation 4 id\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{today}}\",\r\n  \"endDate\": \"{{inTwoMonthsAndOneDay}}\",\r\n  \"pensumPercentage\": 20,\r\n  \"contractId\": \"{{DEVELOPER 3 Contract 1 id}}\",\r\n  \"projectId\": \"{{Project 1 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/allocation",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									]
								},
								"description": "ADMINISTRATORS can create allocations for every project, PROJECTMANAGER for their own projects and DEVELOPER for none"
							},
							"response": []
						},
						{
							"name": "Create Allocation 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8deaa12a-3040-42ff-b96d-3ca93f3b3be9",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response has expected startDate: \" + pm.environment.get(\"inSixMonths\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.startDate).to.eql(pm.environment.get(\"inSixMonths\"));",
											"});",
											"",
											"pm.test(\"Response has expected endDate: \" + pm.environment.get(\"inNineMonths\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.endDate).to.eql(pm.environment.get(\"inNineMonths\"));",
											"});",
											"",
											"pm.test(\"Response has expected pensumPercentage: 50\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pensumPercentage).to.eql(50);",
											"});",
											"",
											"pm.test(\"Response has expected contractId: \" + pm.environment.get(\"DEVELOPER 2 Contract 2 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.contractId).to.eql(pm.environment.get(\"DEVELOPER 2 Contract 2 id\"));",
											"});",
											"",
											"pm.test(\"Response has expected projectId: \" + pm.environment.get(\"Project 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.projectId).to.eql(pm.environment.get(\"Project 1 id\"));",
											"});",
											"",
											"pm.test(\"Save id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"Allocation 5 id\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{inSixMonths}}\",\r\n  \"endDate\": \"{{inNineMonths}}\",\r\n  \"pensumPercentage\": 50,\r\n  \"contractId\": \"{{DEVELOPER 2 Contract 2 id}}\",\r\n  \"projectId\": \"{{Project 1 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/allocation",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									]
								},
								"description": "ADMINISTRATORS can create allocations for every project, PROJECTMANAGER for their own projects and DEVELOPER for none"
							},
							"response": []
						},
						{
							"name": "Create Allocation 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8deaa12a-3040-42ff-b96d-3ca93f3b3be9",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response has expected startDate: \" + pm.environment.get(\"inSevenMonths\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.startDate).to.eql(pm.environment.get(\"inSevenMonths\"));",
											"});",
											"",
											"pm.test(\"Response has expected endDate: \" + pm.environment.get(\"inTenMonths\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.endDate).to.eql(pm.environment.get(\"inTenMonths\"));",
											"});",
											"",
											"pm.test(\"Response has expected pensumPercentage: 80\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pensumPercentage).to.eql(80);",
											"});",
											"",
											"pm.test(\"Response has expected contractId: \" + pm.environment.get(\"DEVELOPER 1 Contract 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.contractId).to.eql(pm.environment.get(\"DEVELOPER 1 Contract 1 id\"));",
											"});",
											"",
											"pm.test(\"Response has expected projectId: \" + pm.environment.get(\"Project 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.projectId).to.eql(pm.environment.get(\"Project 1 id\"));",
											"});",
											"",
											"pm.test(\"Save id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"Allocation 6 id\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{inSevenMonths}}\",\r\n  \"endDate\": \"{{inTenMonths}}\",\r\n  \"pensumPercentage\": 80,\r\n  \"contractId\": \"{{DEVELOPER 1 Contract 1 id}}\",\r\n  \"projectId\": \"{{Project 1 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/allocation",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									]
								},
								"description": "ADMINISTRATORS can create allocations for every project, PROJECTMANAGER for their own projects and DEVELOPER for none"
							},
							"response": []
						},
						{
							"name": "Create Allocation 8",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8deaa12a-3040-42ff-b96d-3ca93f3b3be9",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response has expected startDate: \" + pm.environment.get(\"fourMonthsBack\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.startDate).to.eql(pm.environment.get(\"fourMonthsBack\"));",
											"});",
											"",
											"pm.test(\"Response has expected endDate: \" + pm.environment.get(\"yesterday\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.endDate).to.eql(pm.environment.get(\"yesterday\"));",
											"});",
											"",
											"pm.test(\"Response has expected pensumPercentage: 80\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pensumPercentage).to.eql(80);",
											"});",
											"",
											"pm.test(\"Response has expected contractId: \" + pm.environment.get(\"DEVELOPER 2 Contract 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.contractId).to.eql(pm.environment.get(\"DEVELOPER 2 Contract 1 id\"));",
											"});",
											"",
											"pm.test(\"Response has expected projectId: \" + pm.environment.get(\"Project 2 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.projectId).to.eql(pm.environment.get(\"Project 2 id\"));",
											"});",
											"",
											"pm.test(\"Save id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"Allocation 8 id\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{fourMonthsBack}}\",\r\n  \"endDate\": \"{{yesterday}}\",\r\n  \"pensumPercentage\": 80,\r\n  \"contractId\": \"{{DEVELOPER 2 Contract 1 id}}\",\r\n  \"projectId\": \"{{Project 2 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/allocation",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									]
								},
								"description": "ADMINISTRATORS can create allocations for every project, PROJECTMANAGER for their own projects and DEVELOPER for none"
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{PROJECTMANAGER 1 token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "57a7e49e-f3a6-4887-86a2-f2e2c29fa51a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a88b3e67-ffa6-4b24-8960-5d800d9b52b0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "with ADMINISTRATOR 2",
					"item": [
						{
							"name": "Request a JWT token for ADMINISTRATOR 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7709b55-1173-4bd0-a0c6-319afc62d0ee",
										"exec": [
											"function jwt_decode(jwt) {",
											"    var parts = jwt.split('.');",
											"    return JSON.parse(atob(parts[1]));",
											"}",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"JSON Object has token property\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('token');",
											"});",
											"",
											"pm.test(\"JWT token has employee claim\", function () {",
											"    var jsonData = pm.response.json();",
											"    decodedToken = jwt_decode(jsonData.token);",
											"    pm.expect(decodedToken).to.have.property('employee');",
											"});",
											"",
											"pm.test(\"JWT token has expected firstName: \" + pm.environment.get(\"ADMINISTRATOR 1 firstName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    decodedToken = jwt_decode(jsonData.token);",
											"    pm.expect(decodedToken.employee.firstName).to.eql(pm.environment.get(\"ADMINISTRATOR 1 firstName\"));",
											"});",
											"",
											"pm.test(\"JWT token has expected lastName: \" + pm.environment.get(\"ADMINISTRATOR 1 lastName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    decodedToken = jwt_decode(jsonData.token);",
											"    pm.expect(decodedToken.employee.lastName).to.eql(pm.environment.get(\"ADMINISTRATOR 1 lastName\"));",
											"});",
											"",
											"pm.test(\"JWT token has expected emailAddress: \" + pm.environment.get(\"ADMINISTRATOR 1 emailAddress\"), function () {",
											"    var jsonData = pm.response.json();",
											"    decodedToken = jwt_decode(jsonData.token);",
											"    pm.expect(decodedToken.employee.emailAddress).to.eql(pm.environment.get(\"ADMINISTRATOR 1 emailAddress\"));",
											"});",
											"",
											"pm.test(\"JWT token has expected active: true\", function () {",
											"    var jsonData = pm.response.json();",
											"    decodedToken = jwt_decode(jsonData.token);",
											"    pm.expect(decodedToken.employee.active).to.eql(true);",
											"});",
											"",
											"pm.test(\"JWT token has expected role: ADMINISTRATOR\", function () {",
											"    var jsonData = pm.response.json();",
											"    decodedToken = jwt_decode(jsonData.token);",
											"    pm.expect(decodedToken.employee.role).to.eql(\"ADMINISTRATOR\");",
											"});",
											"",
											"pm.test(\"Save token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"ADMINISTRATOR 2 token\", jsonData.token);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a85da618-0370-466b-b200-3bc006e38f6e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"emailAddress\": \"{{ADMINISTRATOR 2 emailAddress}}\",\r\n  \"rawPassword\": \"{{ADMINISTRATOR 2 password}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/token",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change to PROJECTMANAGER 2 in Project 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ba2ae6a7-5013-4e7f-8430-7098aa9c2250",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has expected name: Some more testing\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.eql(\"Some more testing\");",
											"});",
											"",
											"pm.test(\"Response has expected startDate: \" + pm.environment.get(\"eightMonthsBack\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.startDate).to.eql(pm.environment.get(\"eightMonthsBack\"));",
											"});",
											"",
											"pm.test(\"Response has expected endDate: \" + pm.environment.get(\"inSixMonths\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.endDate).to.eql(pm.environment.get(\"inSixMonths\"));",
											"});",
											"",
											"pm.test(\"Response has expected ftePercentage: 100\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.ftePercentage).to.eql(100);",
											"});",
											"",
											"pm.test(\"Response has expected projectManagerId: \" + pm.environment.get(\"PROJECTMANAGER 2 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.projectManagerId).to.eql(pm.environment.get(\"PROJECTMANAGER 2 id\"));",
											"});",
											"",
											"pm.test(\"Save id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"Project 2 id\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Some more testing\",\r\n  \"ftePercentage\": 100,\r\n  \"startDate\": \"{{eightMonthsBack}}\",\r\n  \"endDate\": \"{{inSixMonths}}\",\r\n  \"projectManagerId\": \"{{PROJECTMANAGER 2 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/project/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"project",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{Project 2 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Contract 1 of DEVELOPER 2 should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc0106da-548f-477c-81fb-daa18b578eb7",
										"exec": [
											"pm.test(\"Status code is 412\", function () {",
											"    pm.response.to.have.status(412);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/contract/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"contract",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{DEVELOPER 2 Contract 1 id}}"
										}
									]
								},
								"description": "Should fail because there are still allocations on this Contract"
							},
							"response": []
						},
						{
							"name": "Create new project 3",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ac4eb02e-5a8c-45e6-83d8-2930195ae609",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4a6a2e57-18c2-4d58-bd3a-5b96e8957eca",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response has expected name: Empty Project\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.eql(\"Empty Project\");",
											"});",
											"",
											"pm.test(\"Response has expected startDate: \" + pm.environment.get(\"yesterday\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.startDate).to.eql(pm.environment.get(\"yesterday\"));",
											"});",
											"",
											"pm.test(\"Response has expected endDate: \" + pm.environment.get(\"tomorrow\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.endDate).to.eql(pm.environment.get(\"tomorrow\"));",
											"});",
											"",
											"pm.test(\"Response has expected ftePercentage: 9223372036854776000\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.ftePercentage).to.eql(9223372036854776000);",
											"});",
											"",
											"pm.test(\"Response has expected projectManagerId: \" + pm.environment.get(\"PROJECTMANAGER 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.projectManagerId).to.eql(pm.environment.get(\"PROJECTMANAGER 1 id\"));",
											"});",
											"",
											"pm.test(\"Save id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"Project 3 id\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Empty Project\",\r\n  \"ftePercentage\": 9223372036854775807,\r\n  \"startDate\": \"{{yesterday}}\",\r\n  \"endDate\": \"{{tomorrow}}\",\r\n  \"projectManagerId\": \"{{PROJECTMANAGER 1 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/project",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"project"
									]
								},
								"description": "Empty project to test query parameters for DEVELOPER"
							},
							"response": []
						},
						{
							"name": "Create Contract 2 for DEVELOPER 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8cc344b8-1169-498b-a1ba-5a0bf3b43a1d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1d7ed2bb-b222-4f48-a070-725445dbac57",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response has expected startDate: \" + pm.environment.get(\"eightMonthsBack\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.startDate).to.eql(pm.environment.get(\"eightMonthsBack\"));",
											"});",
											"",
											"pm.test(\"Response has expected endDate: \" + pm.environment.get(\"twoMonthsAndOneDayBack\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.endDate).to.eql(pm.environment.get(\"twoMonthsAndOneDayBack\"));",
											"});",
											"",
											"pm.test(\"Response has expected pensumPercentage: 100\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pensumPercentage).to.eql(100);",
											"});",
											"",
											"pm.test(\"Response has expected employeeId: \" + pm.environment.get(\"DEVELOPER 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.employeeId).to.eql(pm.environment.get(\"DEVELOPER 1 id\"));",
											"});",
											"",
											"",
											"pm.test(\"Save id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"DEVELOPER 1 Contract 2 id\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{eightMonthsBack}}\",\r\n  \"endDate\": \"{{twoMonthsAndOneDayBack}}\",\r\n  \"pensumPercentage\": 100,\r\n  \"employeeId\": \"{{DEVELOPER 1 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/contract",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"contract"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{ADMINISTRATOR 2 token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3e26f122-e0aa-412c-ac8e-ebc5f96d2b6b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "95f96841-a4f1-47dd-aa46-e2127bf2f626",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "with PROJECTMANAGER 2",
					"item": [
						{
							"name": "Request a JWT token for PROJECTMANAGER 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7709b55-1173-4bd0-a0c6-319afc62d0ee",
										"exec": [
											"function jwt_decode(jwt) {",
											"    var parts = jwt.split('.');",
											"    return JSON.parse(atob(parts[1]));",
											"}",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"JSON Object has token property\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('token');",
											"});",
											"",
											"pm.test(\"JWT token has employee claim\", function () {",
											"    var jsonData = pm.response.json();",
											"    decodedToken = jwt_decode(jsonData.token);",
											"    pm.expect(decodedToken).to.have.property('employee');",
											"});",
											"",
											"pm.test(\"JWT token has expected firstName: \" + pm.environment.get(\"PROJECTMANAGER 1 firstName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    decodedToken = jwt_decode(jsonData.token);",
											"    pm.expect(decodedToken.employee.firstName).to.eql(pm.environment.get(\"PROJECTMANAGER 1 firstName\"));",
											"});",
											"",
											"pm.test(\"JWT token has expected lastName: \" + pm.environment.get(\"PROJECTMANAGER 1 lastName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    decodedToken = jwt_decode(jsonData.token);",
											"    pm.expect(decodedToken.employee.lastName).to.eql(pm.environment.get(\"PROJECTMANAGER 1 lastName\"));",
											"});",
											"",
											"pm.test(\"JWT token has expected emailAddress: \" + pm.environment.get(\"PROJECTMANAGER 1 emailAddress\"), function () {",
											"    var jsonData = pm.response.json();",
											"    decodedToken = jwt_decode(jsonData.token);",
											"    pm.expect(decodedToken.employee.emailAddress).to.eql(pm.environment.get(\"PROJECTMANAGER 1 emailAddress\"));",
											"});",
											"",
											"pm.test(\"JWT token has expected active: true\", function () {",
											"    var jsonData = pm.response.json();",
											"    decodedToken = jwt_decode(jsonData.token);",
											"    pm.expect(decodedToken.employee.active).to.eql(true);",
											"});",
											"",
											"pm.test(\"JWT token has expected role: PROJECTMANAGER\", function () {",
											"    var jsonData = pm.response.json();",
											"    decodedToken = jwt_decode(jsonData.token);",
											"    pm.expect(decodedToken.employee.role).to.eql(\"PROJECTMANAGER\");",
											"});",
											"",
											"pm.test(\"Save token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"PROJECTMANAGER 2 token\", jsonData.token);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a85da618-0370-466b-b200-3bc006e38f6e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"emailAddress\": \"{{PROJECTMANAGER 2 emailAddress}}\",\r\n  \"rawPassword\": \"{{PROJECTMANAGER 2 password}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/token",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create DEVELOPER 1 should fail",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c3d1d47f-9d85-4079-b81e-27ce18c93047",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f646481d-f33b-41d9-aa0e-e2aa2dba606d",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"active\": true,\r\n  \"firstName\": \"{{DEVELOPER 1 firstName}}\",\r\n  \"lastName\": \"{{DEVELOPER 1 lastName}}\",\r\n  \"emailAddress\": \"{{DEVELOPER 1 emailAddress}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/employee?password={{DEVELOPER 1 password}}&role=DEVELOPER",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee"
									],
									"query": [
										{
											"key": "password",
											"value": "{{DEVELOPER 1 password}}"
										},
										{
											"key": "role",
											"value": "DEVELOPER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create PROJECTMANAGER 1 should fail",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c3d1d47f-9d85-4079-b81e-27ce18c93047",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f646481d-f33b-41d9-aa0e-e2aa2dba606d",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ADMINISTRATOR 1 token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"active\": true,\r\n  \"firstName\": \"Wrong firstName\",\r\n  \"lastName\": \"{{PROJECTMANAGER 1 lastName}}\",\r\n  \"emailAddress\": \"{{PROJECTMANAGER 1 emailAddress}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/employee?password={{PROJECTMANAGER 1 password}}&role=PROJECTMANAGER",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee"
									],
									"query": [
										{
											"key": "password",
											"value": "{{PROJECTMANAGER 1 password}}"
										},
										{
											"key": "role",
											"value": "PROJECTMANAGER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update PROJECTMANAGER 1 should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3359f506-94fd-4535-bcbb-0f064c5320e3",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"active\": true,\r\n  \"firstName\": \"{{PROJECTMANAGER 1 firstName}}\",\r\n  \"lastName\": \"{{PROJECTMANAGER 1 lastName}}\",\r\n  \"emailAddress\": \"{{PROJECTMANAGER 1 emailAddress}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/employee/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{PROJECTMANAGER 1 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Developers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1eb3ed49-bb37-442b-9175-6c55499edf20",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Developer employee list has expected length of 3\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(3);",
											"});",
											"",
											"pm.test(\"Response has expected role: DEVELOPER\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].role).to.eql(\"DEVELOPER\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/employee?role=DEVELOPER",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee"
									],
									"query": [
										{
											"key": "role",
											"value": "DEVELOPER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Project Managers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1eb3ed49-bb37-442b-9175-6c55499edf20",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Project manager employee list has expected length of 2\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Response has expected role: PROJECTMANAGER\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].role).to.eql(\"PROJECTMANAGER\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/employee?role=PROJECTMANAGER",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee"
									],
									"query": [
										{
											"key": "role",
											"value": "PROJECTMANAGER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check if DEVELOPER 1 is here",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ed593d2-9473-4b03-a3e4-85261c3a2dbf",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has expected firstName: \" + pm.environment.get(\"DEVELOPER 1 firstName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.firstName).to.eql(pm.environment.get(\"DEVELOPER 1 firstName\"));",
											"});",
											"",
											"pm.test(\"Response has expected lastName: \" + pm.environment.get(\"DEVELOPER 1 lastName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.lastName).to.eql(pm.environment.get(\"DEVELOPER 1 lastName\"));",
											"});",
											"",
											"pm.test(\"Response has expected emailAddress: \" + pm.environment.get(\"DEVELOPER 1 emailAddress\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.emailAddress).to.eql(pm.environment.get(\"DEVELOPER 1 emailAddress\"));",
											"});",
											"",
											"pm.test(\"Response has expected active: true\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.active).to.eql(true);",
											"});",
											"",
											"pm.test(\"Response has expected role: DEVELOPER\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.role).to.eql(\"DEVELOPER\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/employee/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{DEVELOPER 1 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Contract 1 for DEVELOPER 1 should fail",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8cc344b8-1169-498b-a1ba-5a0bf3b43a1d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1d7ed2bb-b222-4f48-a070-725445dbac57",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{twoMonthsBack}}\",\r\n  \"endDate\": \"{{inNineMonths}}\",\r\n  \"pensumPercentage\": 100,\r\n  \"employeeId\": \"{{DEVELOPER 1 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/contract",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"contract"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all contracts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14658db7-0568-4c60-93f7-0ddd6a96bcf8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Contract list has expected length of 5\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(5);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/contract?",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"contract"
									],
									"query": [
										{
											"key": "fromDate",
											"value": "{{fromDate}}",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "{{toDate}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update contract 1 of DEVELOPER 1 should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e78a8665-9dd0-4ce3-90c3-4376bd30e37b",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{twoMonthsBack}}\",\r\n  \"endDate\": \"{{inTenMonths}}\",\r\n  \"pensumPercentage\": 80,\r\n  \"employeeId\": \"{{DEVELOPER 1 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/contract/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"contract",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{DEVELOPER 1 Contract 1 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new project should fail",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ac4eb02e-5a8c-45e6-83d8-2930195ae609",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4a6a2e57-18c2-4d58-bd3a-5b96e8957eca",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Project 1: Testing\",\r\n  \"ftePercentage\": 1500,\r\n  \"startDate\": \"{{today}}\",\r\n  \"endDate\": \"{{inTwelveMonths}}\",\r\n  \"projectManagerId\": \"{{PROJECTMANAGER 1 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/project",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"project"
									]
								},
								"description": "PROJECTMANAGER has no permission to create projects"
							},
							"response": []
						},
						{
							"name": "Get all projects",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "624e625a-0876-4572-a48f-652949a87046",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Project list has expected length of 3\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(3);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/project?",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"project"
									],
									"query": [
										{
											"key": "projectManagerId",
											"value": "{{projectManagerId}}",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "{{fromDate}}",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "{{toDate}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Allocation 7 should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8deaa12a-3040-42ff-b96d-3ca93f3b3be9",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{twoMonthsBack}}\",\r\n  \"endDate\": \"{{yesterday}}\",\r\n  \"pensumPercentage\": 80,\r\n  \"contractId\": \"{{DEVELOPER 1 Contract 1 id}}\",\r\n  \"projectId\": \"{{Project 1 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/allocation",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									]
								},
								"description": "PROJECTMANAGER 2 can not create Allocations in Project 1"
							},
							"response": []
						},
						{
							"name": "Create Allocation 9",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8deaa12a-3040-42ff-b96d-3ca93f3b3be9",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response has expected startDate: \" + pm.environment.get(\"today\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.startDate).to.eql(pm.environment.get(\"today\"));",
											"});",
											"",
											"pm.test(\"Response has expected endDate: \" + pm.environment.get(\"inTwoMonths\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.endDate).to.eql(pm.environment.get(\"inTwoMonths\"));",
											"});",
											"",
											"pm.test(\"Response has expected pensumPercentage: 50\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pensumPercentage).to.eql(50);",
											"});",
											"",
											"pm.test(\"Response has expected contractId: \" + pm.environment.get(\"DEVELOPER 2 Contract 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.contractId).to.eql(pm.environment.get(\"DEVELOPER 2 Contract 1 id\"));",
											"});",
											"",
											"pm.test(\"Response has expected projectId: \" + pm.environment.get(\"Project 2 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.projectId).to.eql(pm.environment.get(\"Project 2 id\"));",
											"});",
											"",
											"pm.test(\"Save id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"Allocation 9 id\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{today}}\",\r\n  \"endDate\": \"{{inTwoMonths}}\",\r\n  \"pensumPercentage\": 50,\r\n  \"contractId\": \"{{DEVELOPER 2 Contract 1 id}}\",\r\n  \"projectId\": \"{{Project 2 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/allocation",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									]
								},
								"description": "ADMINISTRATORS can create allocations for every project, PROJECTMANAGER for their own projects and DEVELOPER for none"
							},
							"response": []
						},
						{
							"name": "Create Allocation 10",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8deaa12a-3040-42ff-b96d-3ca93f3b3be9",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response has expected startDate: \" + pm.environment.get(\"eightMonthsBack\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.startDate).to.eql(pm.environment.get(\"eightMonthsBack\"));",
											"});",
											"",
											"pm.test(\"Response has expected endDate: \" + pm.environment.get(\"fourMonthsAndOneDayBack\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.endDate).to.eql(pm.environment.get(\"fourMonthsAndOneDayBack\"));",
											"});",
											"",
											"pm.test(\"Response has expected pensumPercentage: 100\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pensumPercentage).to.eql(100);",
											"});",
											"",
											"pm.test(\"Response has expected contractId: \" + pm.environment.get(\"DEVELOPER 1 Contract 2 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.contractId).to.eql(pm.environment.get(\"DEVELOPER 1 Contract 2 id\"));",
											"});",
											"",
											"pm.test(\"Response has expected projectId: \" + pm.environment.get(\"Project 2 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.projectId).to.eql(pm.environment.get(\"Project 2 id\"));",
											"});",
											"",
											"pm.test(\"Save id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"Allocation 10 id\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{eightMonthsBack}}\",\r\n  \"endDate\": \"{{fourMonthsAndOneDayBack}}\",\r\n  \"pensumPercentage\": 100,\r\n  \"contractId\": \"{{DEVELOPER 1 Contract 2 id}}\",\r\n  \"projectId\": \"{{Project 2 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/allocation",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									]
								},
								"description": "ADMINISTRATORS can create allocations for every project, PROJECTMANAGER for their own projects and DEVELOPER for none"
							},
							"response": []
						},
						{
							"name": "Create Allocation 11",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8deaa12a-3040-42ff-b96d-3ca93f3b3be9",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response has expected startDate: \" + pm.environment.get(\"fourMonthsBack\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.startDate).to.eql(pm.environment.get(\"fourMonthsBack\"));",
											"});",
											"",
											"pm.test(\"Response has expected endDate: \" + pm.environment.get(\"twoMonthsAndOneDayBack\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.endDate).to.eql(pm.environment.get(\"twoMonthsAndOneDayBack\"));",
											"});",
											"",
											"pm.test(\"Response has expected pensumPercentage: 20\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pensumPercentage).to.eql(20);",
											"});",
											"",
											"pm.test(\"Response has expected contractId: \" + pm.environment.get(\"DEVELOPER 1 Contract 2 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.contractId).to.eql(pm.environment.get(\"DEVELOPER 1 Contract 2 id\"));",
											"});",
											"",
											"pm.test(\"Response has expected projectId: \" + pm.environment.get(\"Project 2 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.projectId).to.eql(pm.environment.get(\"Project 2 id\"));",
											"});",
											"",
											"pm.test(\"Save id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"Allocation 11 id\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{fourMonthsBack}}\",\r\n  \"endDate\": \"{{twoMonthsAndOneDayBack}}\",\r\n  \"pensumPercentage\": 20,\r\n  \"contractId\": \"{{DEVELOPER 1 Contract 2 id}}\",\r\n  \"projectId\": \"{{Project 2 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/allocation",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									]
								},
								"description": "ADMINISTRATORS can create allocations for every project, PROJECTMANAGER for their own projects and DEVELOPER for none"
							},
							"response": []
						},
						{
							"name": "Create Allocation 12",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8deaa12a-3040-42ff-b96d-3ca93f3b3be9",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response has expected startDate: \" + pm.environment.get(\"inTwoMonths\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.startDate).to.eql(pm.environment.get(\"inTwoMonths\"));",
											"});",
											"",
											"pm.test(\"Response has expected endDate: \" + pm.environment.get(\"inFiveMonths\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.endDate).to.eql(pm.environment.get(\"inFiveMonths\"));",
											"});",
											"",
											"pm.test(\"Response has expected pensumPercentage: 30\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pensumPercentage).to.eql(30);",
											"});",
											"",
											"pm.test(\"Response has expected contractId: \" + pm.environment.get(\"DEVELOPER 3 Contract 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.contractId).to.eql(pm.environment.get(\"DEVELOPER 3 Contract 1 id\"));",
											"});",
											"",
											"pm.test(\"Response has expected projectId: \" + pm.environment.get(\"Project 2 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.projectId).to.eql(pm.environment.get(\"Project 2 id\"));",
											"});",
											"",
											"pm.test(\"Save id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"Allocation 12 id\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{inTwoMonths}}\",\r\n  \"endDate\": \"{{inFiveMonths}}\",\r\n  \"pensumPercentage\": 30,\r\n  \"contractId\": \"{{DEVELOPER 3 Contract 1 id}}\",\r\n  \"projectId\": \"{{Project 2 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/allocation",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									]
								},
								"description": "ADMINISTRATORS can create allocations for every project, PROJECTMANAGER for their own projects and DEVELOPER for none"
							},
							"response": []
						},
						{
							"name": "Create Allocation 13",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8deaa12a-3040-42ff-b96d-3ca93f3b3be9",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response has expected startDate: \" + pm.environment.get(\"today\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.startDate).to.eql(pm.environment.get(\"today\"));",
											"});",
											"",
											"pm.test(\"Response has expected endDate: \" + pm.environment.get(\"inThreeMonths\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.endDate).to.eql(pm.environment.get(\"inThreeMonths\"));",
											"});",
											"",
											"pm.test(\"Response has expected pensumPercentage: 40\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pensumPercentage).to.eql(40);",
											"});",
											"",
											"pm.test(\"Response has expected contractId: \" + pm.environment.get(\"DEVELOPER 1 Contract 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.contractId).to.eql(pm.environment.get(\"DEVELOPER 1 Contract 1 id\"));",
											"});",
											"",
											"pm.test(\"Response has expected projectId: \" + pm.environment.get(\"Project 2 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.projectId).to.eql(pm.environment.get(\"Project 2 id\"));",
											"});",
											"",
											"pm.test(\"Save id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"Allocation 13 id\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{today}}\",\r\n  \"endDate\": \"{{inThreeMonths}}\",\r\n  \"pensumPercentage\": 40,\r\n  \"contractId\": \"{{DEVELOPER 1 Contract 1 id}}\",\r\n  \"projectId\": \"{{Project 2 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/allocation",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									]
								},
								"description": "ADMINISTRATORS can create allocations for every project, PROJECTMANAGER for their own projects and DEVELOPER for none"
							},
							"response": []
						},
						{
							"name": "Create Allocation 14",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8deaa12a-3040-42ff-b96d-3ca93f3b3be9",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response has expected startDate: \" + pm.environment.get(\"inFourMonthsAndOneDay\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.startDate).to.eql(pm.environment.get(\"inFourMonthsAndOneDay\"));",
											"});",
											"",
											"pm.test(\"Response has expected endDate: \" + pm.environment.get(\"inSixMonths\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.endDate).to.eql(pm.environment.get(\"inSixMonths\"));",
											"});",
											"",
											"pm.test(\"Response has expected pensumPercentage: 80\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pensumPercentage).to.eql(80);",
											"});",
											"",
											"pm.test(\"Response has expected contractId: \" + pm.environment.get(\"DEVELOPER 1 Contract 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.contractId).to.eql(pm.environment.get(\"DEVELOPER 1 Contract 1 id\"));",
											"});",
											"",
											"pm.test(\"Response has expected projectId: \" + pm.environment.get(\"Project 2 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.projectId).to.eql(pm.environment.get(\"Project 2 id\"));",
											"});",
											"",
											"pm.test(\"Save id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"Allocation 14 id\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{inFourMonthsAndOneDay}}\",\r\n  \"endDate\": \"{{inSixMonths}}\",\r\n  \"pensumPercentage\": 80,\r\n  \"contractId\": \"{{DEVELOPER 1 Contract 1 id}}\",\r\n  \"projectId\": \"{{Project 2 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/allocation",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									]
								},
								"description": "ADMINISTRATORS can create allocations for every project, PROJECTMANAGER for their own projects and DEVELOPER for none"
							},
							"response": []
						},
						{
							"name": "Delete Allocation 9",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "57a5ed34-bae3-4501-a246-8febc30c9418",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/allocation/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{Allocation 9 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Allocation 15 should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8deaa12a-3040-42ff-b96d-3ca93f3b3be9",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{today}}\",\r\n  \"endDate\": \"{{inTwoMonths}}\",\r\n  \"pensumPercentage\": 40,\r\n  \"contractId\": \"{{DEVELOPER 2 Contract 1 id}}\",\r\n  \"projectId\": \"{{Project 3 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/allocation",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									]
								},
								"description": "ADMINISTRATORS can create allocations for every project, PROJECTMANAGER for their own projects and DEVELOPER for none"
							},
							"response": []
						},
						{
							"name": "Create Allocation 15",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8deaa12a-3040-42ff-b96d-3ca93f3b3be9",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response has expected startDate: \" + pm.environment.get(\"today\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.startDate).to.eql(pm.environment.get(\"today\"));",
											"});",
											"",
											"pm.test(\"Response has expected endDate: \" + pm.environment.get(\"inTwoMonths\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.endDate).to.eql(pm.environment.get(\"inTwoMonths\"));",
											"});",
											"",
											"pm.test(\"Response has expected pensumPercentage: 40\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pensumPercentage).to.eql(40);",
											"});",
											"",
											"pm.test(\"Response has expected contractId: \" + pm.environment.get(\"DEVELOPER 2 Contract 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.contractId).to.eql(pm.environment.get(\"DEVELOPER 2 Contract 1 id\"));",
											"});",
											"",
											"pm.test(\"Response has expected projectId: \" + pm.environment.get(\"Project 2 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.projectId).to.eql(pm.environment.get(\"Project 2 id\"));",
											"});",
											"",
											"pm.test(\"Save id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"Allocation 15 id\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{today}}\",\r\n  \"endDate\": \"{{inTwoMonths}}\",\r\n  \"pensumPercentage\": 40,\r\n  \"contractId\": \"{{DEVELOPER 2 Contract 1 id}}\",\r\n  \"projectId\": \"{{Project 2 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/allocation",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									]
								},
								"description": "ADMINISTRATORS can create allocations for every project, PROJECTMANAGER for their own projects and DEVELOPER for none"
							},
							"response": []
						},
						{
							"name": "Delete Contract 1 of DEVELOPER 2 should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc0106da-548f-477c-81fb-daa18b578eb7",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/contract/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"contract",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{DEVELOPER 2 Contract 1 id}}"
										}
									]
								},
								"description": "Should fail because there are still allocations on this Contract"
							},
							"response": []
						},
						{
							"name": "Create Allocation 16 should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8deaa12a-3040-42ff-b96d-3ca93f3b3be9",
										"exec": [
											"pm.test(\"Status code is 412\", function () {",
											"    pm.response.to.have.status(412);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{twoMonthsBack}}\",\r\n  \"endDate\": \"{{oneMonthsBack}}\",\r\n  \"pensumPercentage\": 60,\r\n  \"contractId\": \"{{DEVELOPER 3 Contract 1 id}}\",\r\n  \"projectId\": \"{{Project 2 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/allocation",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									]
								},
								"description": "Should fail because FTE allcation is to high"
							},
							"response": []
						},
						{
							"name": "Create Allocation 17 (should fail?)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8deaa12a-3040-42ff-b96d-3ca93f3b3be9",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response has expected startDate: \" + pm.environment.get(\"oneMonthsBack\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.startDate).to.eql(pm.environment.get(\"oneMonthsBack\"));",
											"});",
											"",
											"pm.test(\"Response has expected endDate: \" + pm.environment.get(\"yesterday\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.endDate).to.eql(pm.environment.get(\"yesterday\"));",
											"});",
											"",
											"pm.test(\"Response has expected pensumPercentage: 50\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pensumPercentage).to.eql(50);",
											"});",
											"",
											"pm.test(\"Response has expected contractId: \" + pm.environment.get(\"DEVELOPER 3 Contract 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.contractId).to.eql(pm.environment.get(\"DEVELOPER 3 Contract 1 id\"));",
											"});",
											"",
											"pm.test(\"Response has expected projectId: \" + pm.environment.get(\"Project 2 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.projectId).to.eql(pm.environment.get(\"Project 2 id\"));",
											"});",
											"",
											"pm.test(\"Save id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"Allocation 17 id\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{oneMonthsBack}}\",\r\n  \"endDate\": \"{{yesterday}}\",\r\n  \"pensumPercentage\": 50,\r\n  \"contractId\": \"{{DEVELOPER 3 Contract 1 id}}\",\r\n  \"projectId\": \"{{Project 2 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/allocation",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									]
								},
								"description": "Can sum of allocations be greater than project FTE?"
							},
							"response": []
						},
						{
							"name": "Change end date of Project 3 should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ba2ae6a7-5013-4e7f-8430-7098aa9c2250",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Empty Project\",\r\n  \"ftePercentage\": 9223372036854775807,\r\n  \"startDate\": \"{{yesterday}}\",\r\n  \"endDate\": \"{{inNineMonths}}\",\r\n  \"projectManagerId\": \"{{PROJECTMANAGER 1 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/project/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"project",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{Project 3 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Change end date of Project 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ba2ae6a7-5013-4e7f-8430-7098aa9c2250",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has expected id: \" + pm.environment.get(\"Project 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"Project 1 id\"));",
											"});",
											"",
											"pm.test(\"Response has expected name: Project 1: Testing\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.eql(\"Project 1: Testing\");",
											"});",
											"",
											"pm.test(\"Response has expected startDate: \" + pm.environment.get(\"today\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.startDate).to.eql(pm.environment.get(\"today\"));",
											"});",
											"",
											"pm.test(\"Response has expected endDate: \" + pm.environment.get(\"inNineMonths\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.endDate).to.eql(pm.environment.get(\"inNineMonths\"));",
											"});",
											"",
											"pm.test(\"Response has expected ftePercentage: 1500\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.ftePercentage).to.eql(1500);",
											"});",
											"",
											"pm.test(\"Response has expected projectManagerId: \" + pm.environment.get(\"PROJECTMANAGER 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.projectManagerId).to.eql(pm.environment.get(\"PROJECTMANAGER 1 id\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Project 1: Testing\",\r\n  \"ftePercentage\": 1500,\r\n  \"startDate\": \"{{today}}\",\r\n  \"endDate\": \"{{inNineMonths}}\",\r\n  \"projectManagerId\": \"{{PROJECTMANAGER 1 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/project/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"project",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{Project 1 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check end date of Allocation 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cebe4e7d-7654-4fc3-b623-64243d1bbf61",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has expected id: \" + pm.environment.get(\"Allocation 6 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"Allocation 6 id\"));",
											"});",
											"",
											"pm.test(\"Response has expected startDate: \" + pm.environment.get(\"inSevenMonths\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.startDate).to.eql(pm.environment.get(\"inSevenMonths\"));",
											"});",
											"",
											"pm.test(\"Response has expected endDate: \" + pm.environment.get(\"inNineMonths\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.endDate).to.eql(pm.environment.get(\"inNineMonths\"));",
											"});",
											"",
											"pm.test(\"Response has expected pensumPercentage: 80\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pensumPercentage).to.eql(80);",
											"});",
											"",
											"pm.test(\"Response has expected contractId: \" + pm.environment.get(\"DEVELOPER 1 Contract 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.contractId).to.eql(pm.environment.get(\"DEVELOPER 1 Contract 1 id\"));",
											"});",
											"",
											"pm.test(\"Response has expected projectId: \" + pm.environment.get(\"Project 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.projectId).to.eql(pm.environment.get(\"Project 1 id\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/allocation/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{Allocation 6 id}}"
										}
									]
								},
								"description": "Should be the same as the end date of project 2"
							},
							"response": []
						},
						{
							"name": "Get all allocations of DEVELOPER 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "380f2729-677d-4987-b481-dd887fed7934",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Allocation list has expected length of 7\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(7);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/allocation?employeeId={{DEVELOPER 1 id}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									],
									"query": [
										{
											"key": "employeeId",
											"value": "{{DEVELOPER 1 id}}"
										},
										{
											"key": "projectId",
											"value": "{{projectId}}",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "{{fromDate}}",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "{{toDate}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all allocations of DEVELOPER 1 from Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "380f2729-677d-4987-b481-dd887fed7934",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Allocation list has expected length of 4\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(4);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/allocation?employeeId={{DEVELOPER 1 id}}&fromDate={{inOneMonths}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									],
									"query": [
										{
											"key": "employeeId",
											"value": "{{DEVELOPER 1 id}}"
										},
										{
											"key": "projectId",
											"value": "{{Project 1 id}}",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "{{inOneMonths}}"
										},
										{
											"key": "toDate",
											"value": "{{inFourMonths}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all allocations of DEVELOPER 1 until Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "380f2729-677d-4987-b481-dd887fed7934",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Allocation list has expected length of 4\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(4);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/allocation?employeeId={{DEVELOPER 1 id}}&toDate={{inFourMonths}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									],
									"query": [
										{
											"key": "employeeId",
											"value": "{{DEVELOPER 1 id}}"
										},
										{
											"key": "projectId",
											"value": "{{Project 1 id}}",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "{{inOneMonths}}",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "{{inFourMonths}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all allocations of DEVELOPER 1 in between two Dates",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "380f2729-677d-4987-b481-dd887fed7934",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Allocation list has expected length of 2\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/allocation?employeeId={{DEVELOPER 1 id}}&fromDate={{inOneMonths}}&toDate={{inFourMonths}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									],
									"query": [
										{
											"key": "employeeId",
											"value": "{{DEVELOPER 1 id}}"
										},
										{
											"key": "projectId",
											"value": "{{Project 1 id}}",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "{{inOneMonths}}"
										},
										{
											"key": "toDate",
											"value": "{{inFourMonths}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all allocations of DEVELOPER 1 in Project 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "380f2729-677d-4987-b481-dd887fed7934",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Allocation list has expected length of 2\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/allocation?employeeId={{DEVELOPER 1 id}}&projectId={{Project 1 id}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									],
									"query": [
										{
											"key": "employeeId",
											"value": "{{DEVELOPER 1 id}}"
										},
										{
											"key": "projectId",
											"value": "{{Project 1 id}}"
										},
										{
											"key": "fromDate",
											"value": "{{fromDate}}",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "{{toDate}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all allocations of DEVELOPER 1 in Project 1 from Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "380f2729-677d-4987-b481-dd887fed7934",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Allocation list has expected length of 2\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/allocation?employeeId={{DEVELOPER 1 id}}&projectId={{Project 1 id}}&fromDate={{inOneMonths}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									],
									"query": [
										{
											"key": "employeeId",
											"value": "{{DEVELOPER 1 id}}"
										},
										{
											"key": "projectId",
											"value": "{{Project 1 id}}"
										},
										{
											"key": "fromDate",
											"value": "{{inOneMonths}}"
										},
										{
											"key": "toDate",
											"value": "{{inFourMonths}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all allocations of DEVELOPER 1 in Project 1 until Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "380f2729-677d-4987-b481-dd887fed7934",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Allocation list has expected length of 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/allocation?employeeId={{DEVELOPER 1 id}}&projectId={{Project 1 id}}&toDate={{inFourMonths}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									],
									"query": [
										{
											"key": "employeeId",
											"value": "{{DEVELOPER 1 id}}"
										},
										{
											"key": "projectId",
											"value": "{{Project 1 id}}"
										},
										{
											"key": "fromDate",
											"value": "{{inOneMonths}}",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "{{inFourMonths}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all allocations of DEVELOPER 1 in Project 1 between two Dates",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "380f2729-677d-4987-b481-dd887fed7934",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Allocation list has expected length of 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/allocation?employeeId={{DEVELOPER 1 id}}&projectId={{Project 1 id}}&fromDate={{inOneMonths}}&toDate={{inFourMonths}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									],
									"query": [
										{
											"key": "employeeId",
											"value": "{{DEVELOPER 1 id}}"
										},
										{
											"key": "projectId",
											"value": "{{Project 1 id}}"
										},
										{
											"key": "fromDate",
											"value": "{{inOneMonths}}"
										},
										{
											"key": "toDate",
											"value": "{{inFourMonths}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all allocations of Project 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "380f2729-677d-4987-b481-dd887fed7934",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Allocation list has expected length of 6\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(6);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/allocation?projectId={{projectId}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									],
									"query": [
										{
											"key": "employeeId",
											"value": "{{DEVELOPER 1 id}}",
											"disabled": true
										},
										{
											"key": "projectId",
											"value": "{{projectId}}"
										},
										{
											"key": "fromDate",
											"value": "{{fromDate}}",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "{{toDate}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all allocations in Project 1 from Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "380f2729-677d-4987-b481-dd887fed7934",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Allocation list has expected length of 6\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(6);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/allocation?projectId={{Project 1 id}}&fromDate={{inOneMonths}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									],
									"query": [
										{
											"key": "employeeId",
											"value": "{{DEVELOPER 1 id}}",
											"disabled": true
										},
										{
											"key": "projectId",
											"value": "{{Project 1 id}}"
										},
										{
											"key": "fromDate",
											"value": "{{inOneMonths}}"
										},
										{
											"key": "toDate",
											"value": "{{inFourMonths}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all allocations in Project 1 until Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "380f2729-677d-4987-b481-dd887fed7934",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Allocation list has expected length of 4\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(4);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/allocation?projectId={{Project 1 id}}&toDate={{inFourMonths}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									],
									"query": [
										{
											"key": "employeeId",
											"value": "{{DEVELOPER 1 id}}",
											"disabled": true
										},
										{
											"key": "projectId",
											"value": "{{Project 1 id}}"
										},
										{
											"key": "fromDate",
											"value": "{{inOneMonths}}",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "{{inFourMonths}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all allocations in Project 1 between two Dates",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "380f2729-677d-4987-b481-dd887fed7934",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Allocation list has expected length of 4\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(4);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/allocation?projectId={{Project 1 id}}&fromDate={{inOneMonths}}&toDate={{inFourMonths}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									],
									"query": [
										{
											"key": "employeeId",
											"value": "{{DEVELOPER 1 id}}",
											"disabled": true
										},
										{
											"key": "projectId",
											"value": "{{Project 1 id}}"
										},
										{
											"key": "fromDate",
											"value": "{{inOneMonths}}"
										},
										{
											"key": "toDate",
											"value": "{{inFourMonths}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all contracts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03360b25-5519-4912-8dd5-881d10d958a3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Contract list has expected length of 5\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(5);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/contract?",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"contract"
									],
									"query": [
										{
											"key": "fromDate",
											"value": "{{inOneMonths}}",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "{{inFourMonths}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all contracts from Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03360b25-5519-4912-8dd5-881d10d958a3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Contract list has expected length of 4\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(4);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/contract?fromDate={{inOneMonths}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"contract"
									],
									"query": [
										{
											"key": "fromDate",
											"value": "{{inOneMonths}}"
										},
										{
											"key": "toDate",
											"value": "{{inFourMonths}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all contracts until Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03360b25-5519-4912-8dd5-881d10d958a3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Contract list has expected length of 4\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(4);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/contract?toDate={{inFourMonths}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"contract"
									],
									"query": [
										{
											"key": "fromDate",
											"value": "{{inOneMonths}}",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "{{inFourMonths}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all contracts between two Dates",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03360b25-5519-4912-8dd5-881d10d958a3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Contract list has expected length of 3\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(3);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/contract?fromDate={{inOneMonths}}&toDate={{inFourMonths}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"contract"
									],
									"query": [
										{
											"key": "fromDate",
											"value": "{{inOneMonths}}"
										},
										{
											"key": "toDate",
											"value": "{{inFourMonths}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all DEVELOPERS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1eb3ed49-bb37-442b-9175-6c55499edf20",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Developer employee list has expected length of 3\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(3);",
											"});",
											"",
											"pm.test(\"Response has expected role: DEVELOPER\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].role).to.eql(\"DEVELOPER\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/employee?role=DEVELOPER",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee"
									],
									"query": [
										{
											"key": "role",
											"value": "DEVELOPER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all PROJECTMANAGER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1eb3ed49-bb37-442b-9175-6c55499edf20",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Developer employee list has expected length of 2\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Response has expected role: PROJECTMANAGER\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].role).to.eql(\"PROJECTMANAGER\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/employee?role=PROJECTMANAGER",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee"
									],
									"query": [
										{
											"key": "role",
											"value": "PROJECTMANAGER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Projects of PROJECTMANAGER 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85a695c7-026d-4cec-8aed-233ab6d4185e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Developer employee list has expected length of 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/project?projectManagerId={{PROJECTMANAGER 2 id}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"project"
									],
									"query": [
										{
											"key": "projectManagerId",
											"value": "{{PROJECTMANAGER 2 id}}"
										},
										{
											"key": "fromDate",
											"value": "{{fourMonthsBack}}",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "{{inOneMonths}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Projects of PROJECTMANAGER 2 from Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85a695c7-026d-4cec-8aed-233ab6d4185e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Developer employee list has expected length of 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/project?projectManagerId={{PROJECTMANAGER 2 id}}&fromDate={{fourMonthsBack}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"project"
									],
									"query": [
										{
											"key": "projectManagerId",
											"value": "{{PROJECTMANAGER 2 id}}"
										},
										{
											"key": "fromDate",
											"value": "{{fourMonthsBack}}"
										},
										{
											"key": "toDate",
											"value": "{{inOneMonths}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Projects of PROJECTMANAGER 1 until Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85a695c7-026d-4cec-8aed-233ab6d4185e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Developer employee list has expected length of 0\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/project?projectManagerId={{PROJECTMANAGER 1 id}}&toDate={{oneMonthsBack}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"project"
									],
									"query": [
										{
											"key": "projectManagerId",
											"value": "{{PROJECTMANAGER 1 id}}"
										},
										{
											"key": "fromDate",
											"value": "{{fourMonthsBack}}",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "{{oneMonthsBack}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Projects until Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85a695c7-026d-4cec-8aed-233ab6d4185e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Developer employee list has expected length of 0\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/project?toDate={{oneMonthsBack}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"project"
									],
									"query": [
										{
											"key": "projectManagerId",
											"value": "{{PROJECTMANAGER 1 id}}",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "{{fourMonthsBack}}",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "{{oneMonthsBack}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Projects from Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85a695c7-026d-4cec-8aed-233ab6d4185e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Developer employee list has expected length of 0\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/project?fromDate={{inOneMonths}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"project"
									],
									"query": [
										{
											"key": "projectManagerId",
											"value": "{{PROJECTMANAGER 1 id}}",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "{{inOneMonths}}"
										},
										{
											"key": "toDate",
											"value": "{{oneMonthsBack}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Projects between two Dates",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85a695c7-026d-4cec-8aed-233ab6d4185e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Developer employee list has expected length of 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/project?fromDate={{twoMonthsBack}}&toDate={{inThreeMonths}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"project"
									],
									"query": [
										{
											"key": "projectManagerId",
											"value": "{{PROJECTMANAGER 1 id}}",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "{{twoMonthsBack}}"
										},
										{
											"key": "toDate",
											"value": "{{inThreeMonths}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Projects of PROJECTMANAGER 1 between two Dates Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85a695c7-026d-4cec-8aed-233ab6d4185e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Developer employee list has expected length of 2\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/project?projectManagerId={{PROJECTMANAGER 1 id}}&fromDate={{twoMonthsBack}}&toDate={{inThreeMonths}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"project"
									],
									"query": [
										{
											"key": "projectManagerId",
											"value": "{{PROJECTMANAGER 1 id}}"
										},
										{
											"key": "fromDate",
											"value": "{{twoMonthsBack}}"
										},
										{
											"key": "toDate",
											"value": "{{inThreeMonths}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Allocation 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "364b3d0c-573f-4524-a679-8cfaa25bde43",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/allocation/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{Allocation 5 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Project 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ef2da738-6a42-49d2-8981-85be1e4130db",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/project/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"project",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{Project 2 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Anonymize DEVELOPER 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ff885e74-0980-415f-982b-9d654acc1583",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/employee/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{DEVELOPER 2 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check if DEVELOPER 2 is still here",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ed593d2-9473-4b03-a3e4-85261c3a2dbf",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has expected id: \" + pm.environment.get(\"DEVELOPER 2 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"DEVELOPER 2 id\"));",
											"});",
											"",
											"pm.test(\"Response has expected firstName: \" + pm.environment.get(\"DEVELOPER 1 firstName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.firstName).to.eql(pm.environment.get(\"DEVELOPER 1 firstName\"));",
											"});",
											"",
											"pm.test(\"Response has expected lastName: \" + pm.environment.get(\"DEVELOPER 1 lastName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.lastName).to.eql(pm.environment.get(\"DEVELOPER 1 lastName\"));",
											"});",
											"",
											"pm.test(\"Response has expected emailAddress: \" + pm.environment.get(\"DEVELOPER 1 emailAddress\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.emailAddress).to.eql(pm.environment.get(\"DEVELOPER 1 emailAddress\"));",
											"});",
											"",
											"pm.test(\"Response has expected active: true\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.active).to.eql(true);",
											"});",
											"",
											"pm.test(\"Response has expected role: DEVELOPER\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.role).to.eql(\"DEVELOPER\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/employee/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{DEVELOPER 2 id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{PROJECTMANAGER 2 token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "729b877b-38d9-4c8e-958f-e28deddc6f35",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "57ccea41-4f2a-44be-ad23-1997661ad5e3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "with PROJECTMANAGER 1",
					"item": [
						{
							"name": "Create Allocation 7",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8deaa12a-3040-42ff-b96d-3ca93f3b3be9",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response has expected startDate: \" + pm.environment.get(\"twoMonthsBack\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.startDate).to.eql(pm.environment.get(\"twoMonthsBack\"));",
											"});",
											"",
											"pm.test(\"Response has expected endDate: \" + pm.environment.get(\"yesterday\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.endDate).to.eql(pm.environment.get(\"yesterday\"));",
											"});",
											"",
											"pm.test(\"Response has expected pensumPercentage: 80\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pensumPercentage).to.eql(80);",
											"});",
											"",
											"pm.test(\"Response has expected contractId: \" + pm.environment.get(\"DEVELOPER 1 Contract 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.contractId).to.eql(pm.environment.get(\"DEVELOPER 1 Contract 1 id\"));",
											"});",
											"",
											"pm.test(\"Response has expected projectId: \" + pm.environment.get(\"Project 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.projectId).to.eql(pm.environment.get(\"Project 1 id\"));",
											"});",
											"",
											"pm.test(\"Save id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"Allocation 7 id\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{twoMonthsBack}}\",\r\n  \"endDate\": \"{{yesterday}}\",\r\n  \"pensumPercentage\": 80,\r\n  \"contractId\": \"{{DEVELOPER 1 Contract 1 id}}\",\r\n  \"projectId\": \"{{Project 1 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/allocation",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									]
								},
								"description": "ADMINISTRATORS can create allocations for every project, PROJECTMANAGER for their own projects and DEVELOPER for none"
							},
							"response": []
						},
						{
							"name": "Check Allocation 7",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cebe4e7d-7654-4fc3-b623-64243d1bbf61",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has expected id: \" + pm.environment.get(\"Allocation 7 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"Allocation 7 id\"));",
											"});",
											"",
											"pm.test(\"Response has expected startDate: \" + pm.environment.get(\"twoMonthsBack\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.startDate).to.eql(pm.environment.get(\"twoMonthsBack\"));",
											"});",
											"",
											"pm.test(\"Response has expected endDate: \" + pm.environment.get(\"yesterday\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.endDate).to.eql(pm.environment.get(\"yesterday\"));",
											"});",
											"",
											"pm.test(\"Response has expected pensumPercentage: 80\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pensumPercentage).to.eql(80);",
											"});",
											"",
											"pm.test(\"Response has expected contractId: \" + pm.environment.get(\"DEVELOPER 1 Contract 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.contractId).to.eql(pm.environment.get(\"DEVELOPER 1 Contract 1 id\"));",
											"});",
											"",
											"pm.test(\"Response has expected projectId: \" + pm.environment.get(\"Project 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.projectId).to.eql(pm.environment.get(\"Project 1 id\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/allocation/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{Allocation 7 id}}"
										}
									]
								},
								"description": "Should be the same as the end date of project 2"
							},
							"response": []
						},
						{
							"name": "Create Allocation 18",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8deaa12a-3040-42ff-b96d-3ca93f3b3be9",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response has expected startDate: \" + pm.environment.get(\"today\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.startDate).to.eql(pm.environment.get(\"today\"));",
											"});",
											"",
											"pm.test(\"Response has expected endDate: \" + pm.environment.get(\"tomorrow\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.endDate).to.eql(pm.environment.get(\"tomorrow\"));",
											"});",
											"",
											"pm.test(\"Response has expected pensumPercentage: 10\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pensumPercentage).to.eql(10);",
											"});",
											"",
											"pm.test(\"Response has expected contractId: \" + pm.environment.get(\"DEVELOPER 2 Contract 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.contractId).to.eql(pm.environment.get(\"DEVELOPER 2 Contract 1 id\"));",
											"});",
											"",
											"pm.test(\"Response has expected projectId: \" + pm.environment.get(\"Project 3 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.projectId).to.eql(pm.environment.get(\"Project 3 id\"));",
											"});",
											"",
											"pm.test(\"Save id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"Allocation 18 id\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{today}}\",\r\n  \"endDate\": \"{{tomorrow}}\",\r\n  \"pensumPercentage\": 10,\r\n  \"contractId\": \"{{DEVELOPER 2 Contract 1 id}}\",\r\n  \"projectId\": \"{{Project 3 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/allocation",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									]
								},
								"description": "ADMINISTRATORS can create allocations for every project, PROJECTMANAGER for their own projects and DEVELOPER for none"
							},
							"response": []
						},
						{
							"name": "Update Allocation 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "339e1a87-b183-4a6d-9443-b0d83e26fba1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has expected id: \" + pm.environment.get(\"Allocation 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"Allocation 1 id\"));",
											"});",
											"",
											"pm.test(\"Response has expected startDate: \" + pm.environment.get(\"today\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.startDate).to.eql(pm.environment.get(\"today\"));",
											"});",
											"",
											"pm.test(\"Response has expected endDate: \" + pm.environment.get(\"inFourMonths\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.endDate).to.eql(pm.environment.get(\"inFourMonths\"));",
											"});",
											"",
											"pm.test(\"Response has expected pensumPercentage: 30\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pensumPercentage).to.eql(30);",
											"});",
											"",
											"pm.test(\"Response has expected contractId: \" + pm.environment.get(\"DEVELOPER 1 Contract 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.contractId).to.eql(pm.environment.get(\"DEVELOPER 1 Contract 1 id\"));",
											"});",
											"",
											"pm.test(\"Response has expected projectId: \" + pm.environment.get(\"Project 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.projectId).to.eql(pm.environment.get(\"Project 1 id\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{today}}\",\r\n  \"endDate\": \"{{inFourMonths}}\",\r\n  \"pensumPercentage\": 30,\r\n  \"contractId\": \"{{DEVELOPER 1 Contract 1 id}}\",\r\n  \"projectId\": \"{{Project 1 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/allocation/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{Allocation 1 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Allocation 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cebe4e7d-7654-4fc3-b623-64243d1bbf61",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has expected id: \" + pm.environment.get(\"Allocation 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"Allocation 1 id\"));",
											"});",
											"",
											"pm.test(\"Response has expected startDate: \" + pm.environment.get(\"today\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.startDate).to.eql(pm.environment.get(\"today\"));",
											"});",
											"",
											"pm.test(\"Response has expected endDate: \" + pm.environment.get(\"inFourMonths\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.endDate).to.eql(pm.environment.get(\"inFourMonths\"));",
											"});",
											"",
											"pm.test(\"Response has expected pensumPercentage: 30\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pensumPercentage).to.eql(30);",
											"});",
											"",
											"pm.test(\"Response has expected contractId: \" + pm.environment.get(\"DEVELOPER 1 Contract 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.contractId).to.eql(pm.environment.get(\"DEVELOPER 1 Contract 1 id\"));",
											"});",
											"",
											"pm.test(\"Response has expected projectId: \" + pm.environment.get(\"Project 1 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.projectId).to.eql(pm.environment.get(\"Project 1 id\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/allocation/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{Allocation 1 id}}"
										}
									]
								},
								"description": "Should be the same as the end date of project 2"
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{PROJECTMANAGER 1 token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "57a7e49e-f3a6-4887-86a2-f2e2c29fa51a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a88b3e67-ffa6-4b24-8960-5d800d9b52b0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "with DEVELOPER 1",
					"item": [
						{
							"name": "Request a JWT token for DEVELOPER 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7709b55-1173-4bd0-a0c6-319afc62d0ee",
										"exec": [
											"function jwt_decode(jwt) {",
											"    var parts = jwt.split('.');",
											"    return JSON.parse(atob(parts[1]));",
											"}",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"JSON Object has token property\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('token');",
											"});",
											"",
											"pm.test(\"JWT token has employee claim\", function () {",
											"    var jsonData = pm.response.json();",
											"    decodedToken = jwt_decode(jsonData.token);",
											"    pm.expect(decodedToken).to.have.property('employee');",
											"});",
											"",
											"pm.test(\"JWT token has expected firstName: \" + pm.environment.get(\"DEVELOPER 1 firstName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    decodedToken = jwt_decode(jsonData.token);",
											"    pm.expect(decodedToken.employee.firstName).to.eql(pm.environment.get(\"DEVELOPER 1 firstName\"));",
											"});",
											"",
											"pm.test(\"JWT token has expected lastName: \" + pm.environment.get(\"DEVELOPER 1 lastName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    decodedToken = jwt_decode(jsonData.token);",
											"    pm.expect(decodedToken.employee.lastName).to.eql(pm.environment.get(\"DEVELOPER 1 lastName\"));",
											"});",
											"",
											"pm.test(\"JWT token has expected emailAddress: \" + pm.environment.get(\"DEVELOPER 1 emailAddress\"), function () {",
											"    var jsonData = pm.response.json();",
											"    decodedToken = jwt_decode(jsonData.token);",
											"    pm.expect(decodedToken.employee.emailAddress).to.eql(pm.environment.get(\"DEVELOPER 1 emailAddress\"));",
											"});",
											"",
											"pm.test(\"JWT token has expected active: true\", function () {",
											"    var jsonData = pm.response.json();",
											"    decodedToken = jwt_decode(jsonData.token);",
											"    pm.expect(decodedToken.employee.active).to.eql(true);",
											"});",
											"",
											"pm.test(\"JWT token has expected role: DEVELOPER\", function () {",
											"    var jsonData = pm.response.json();",
											"    decodedToken = jwt_decode(jsonData.token);",
											"    pm.expect(decodedToken.employee.role).to.eql(\"DEVELOPER\");",
											"});",
											"",
											"pm.test(\"Save token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"DEVELOPER 1 token\", jsonData.token);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a85da618-0370-466b-b200-3bc006e38f6e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"emailAddress\": \"{{DEVELOPER 1 emailAddress}}\",\r\n  \"rawPassword\": \"{{DEVELOPER 1 password}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/token",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create DEVELOPER 1 should fail",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c3d1d47f-9d85-4079-b81e-27ce18c93047",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f646481d-f33b-41d9-aa0e-e2aa2dba606d",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"active\": true,\r\n  \"firstName\": \"{{DEVELOPER 1 firstName}}\",\r\n  \"lastName\": \"{{DEVELOPER 1 lastName}}\",\r\n  \"emailAddress\": \"{{DEVELOPER 1 emailAddress}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/employee?password={{DEVELOPER 1 password}}&role=DEVELOPER",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee"
									],
									"query": [
										{
											"key": "password",
											"value": "{{DEVELOPER 1 password}}"
										},
										{
											"key": "role",
											"value": "DEVELOPER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create PROJECTMANAGER 1 should fail",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c3d1d47f-9d85-4079-b81e-27ce18c93047",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f646481d-f33b-41d9-aa0e-e2aa2dba606d",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ADMINISTRATOR 1 token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"active\": true,\r\n  \"firstName\": \"Wrong firstName\",\r\n  \"lastName\": \"{{PROJECTMANAGER 1 lastName}}\",\r\n  \"emailAddress\": \"{{PROJECTMANAGER 1 emailAddress}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/employee?password={{PROJECTMANAGER 1 password}}&role=PROJECTMANAGER",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee"
									],
									"query": [
										{
											"key": "password",
											"value": "{{PROJECTMANAGER 1 password}}"
										},
										{
											"key": "role",
											"value": "PROJECTMANAGER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create ADMINISTRATOR 2 should fail",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c3d1d47f-9d85-4079-b81e-27ce18c93047",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f646481d-f33b-41d9-aa0e-e2aa2dba606d",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ADMINISTRATOR 1 token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"active\": true,\r\n  \"firstName\": \"{{ADMINISTRATOR 2 firstName}}\",\r\n  \"lastName\": \"{{ADMINISTRATOR 2 lastName}}\",\r\n  \"emailAddress\": \"{{ADMINISTRATOR 2 emailAddress}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/employee?password={{ADMINISTRATOR 2 password}}&role=ADMINISTRATOR",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee"
									],
									"query": [
										{
											"key": "password",
											"value": "{{ADMINISTRATOR 2 password}}"
										},
										{
											"key": "role",
											"value": "ADMINISTRATOR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update PROJECTMANAGER 1 should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3359f506-94fd-4535-bcbb-0f064c5320e3",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"active\": true,\r\n  \"firstName\": \"{{PROJECTMANAGER 1 firstName}}\",\r\n  \"lastName\": \"{{PROJECTMANAGER 1 lastName}}\",\r\n  \"emailAddress\": \"{{PROJECTMANAGER 1 emailAddress}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/employee/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{PROJECTMANAGER 1 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Developers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1eb3ed49-bb37-442b-9175-6c55499edf20",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Developer employee list has expected length of 3\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(3);",
											"});",
											"",
											"pm.test(\"Response has expected role: DEVELOPER\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].role).to.eql(\"DEVELOPER\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/employee?role=DEVELOPER",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee"
									],
									"query": [
										{
											"key": "role",
											"value": "DEVELOPER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Project Managers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1eb3ed49-bb37-442b-9175-6c55499edf20",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Project manager employee list has expected length of 2\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Response has expected role: PROJECTMANAGER\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].role).to.eql(\"PROJECTMANAGER\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/employee?role=PROJECTMANAGER",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee"
									],
									"query": [
										{
											"key": "role",
											"value": "PROJECTMANAGER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check if DEVELOPER 1 is here",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ed593d2-9473-4b03-a3e4-85261c3a2dbf",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has expected firstName: \" + pm.environment.get(\"DEVELOPER 1 firstName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.firstName).to.eql(pm.environment.get(\"DEVELOPER 1 firstName\"));",
											"});",
											"",
											"pm.test(\"Response has expected lastName: \" + pm.environment.get(\"DEVELOPER 1 lastName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.lastName).to.eql(pm.environment.get(\"DEVELOPER 1 lastName\"));",
											"});",
											"",
											"pm.test(\"Response has expected emailAddress: \" + pm.environment.get(\"DEVELOPER 1 emailAddress\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.emailAddress).to.eql(pm.environment.get(\"DEVELOPER 1 emailAddress\"));",
											"});",
											"",
											"pm.test(\"Response has expected active: true\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.active).to.eql(true);",
											"});",
											"",
											"pm.test(\"Response has expected role: DEVELOPER\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.role).to.eql(\"DEVELOPER\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/employee/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{DEVELOPER 1 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Contract 1 for DEVELOPER 1 should fail",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8cc344b8-1169-498b-a1ba-5a0bf3b43a1d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1d7ed2bb-b222-4f48-a070-725445dbac57",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{twoMonthsBack}}\",\r\n  \"endDate\": \"{{inNineMonths}}\",\r\n  \"pensumPercentage\": 100,\r\n  \"employeeId\": \"{{DEVELOPER 1 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/contract",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"contract"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all contracts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14658db7-0568-4c60-93f7-0ddd6a96bcf8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Contract list has expected length of 2\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/contract?",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"contract"
									],
									"query": [
										{
											"key": "fromDate",
											"value": "{{fromDate}}",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "{{toDate}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update contract 1 of DEVELOPER 1 should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e78a8665-9dd0-4ce3-90c3-4376bd30e37b",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{twoMonthsBack}}\",\r\n  \"endDate\": \"{{inTenMonths}}\",\r\n  \"pensumPercentage\": 80,\r\n  \"employeeId\": \"{{DEVELOPER 1 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/contract/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"contract",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{DEVELOPER 1 Contract 1 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new project should fail",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ac4eb02e-5a8c-45e6-83d8-2930195ae609",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4a6a2e57-18c2-4d58-bd3a-5b96e8957eca",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Project 1: Testing\",\r\n  \"ftePercentage\": 1500,\r\n  \"startDate\": \"{{today}}\",\r\n  \"endDate\": \"{{inTwelveMonths}}\",\r\n  \"projectManagerId\": \"{{PROJECTMANAGER 1 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/project",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all projects",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "624e625a-0876-4572-a48f-652949a87046",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Project list has expected length of 2\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/project?",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"project"
									],
									"query": [
										{
											"key": "projectManagerId",
											"value": "{{projectManagerId}}",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "{{fromDate}}",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "{{toDate}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get project 3 should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2bc327b7-cc92-40f7-8eb9-cf617cc87660",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/project/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"project",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{Project 3 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Allocation 1 should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8deaa12a-3040-42ff-b96d-3ca93f3b3be9",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{today}}\",\r\n  \"endDate\": \"{{inThreeMonths}}\",\r\n  \"pensumPercentage\": 30,\r\n  \"contractId\": \"{{DEVELOPER 1 Contract 1 id}}\",\r\n  \"projectId\": \"{{Project 1 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/allocation",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									]
								},
								"description": "ADMINISTRATORS can create allocations for every project, PROJECTMANAGER for their own projects and DEVELOPER for none"
							},
							"response": []
						},
						{
							"name": "Update Allocation 1 should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "339e1a87-b183-4a6d-9443-b0d83e26fba1",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{today}}\",\r\n  \"endDate\": \"{{inFourMonths}}\",\r\n  \"pensumPercentage\": 40,\r\n  \"contractId\": \"{{DEVELOPER 1 Contract 1 id}}\",\r\n  \"projectId\": \"{{Project 1 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/allocation/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{Allocation 1 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Allocation 9 should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "57a5ed34-bae3-4501-a246-8febc30c9418",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/allocation/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{Allocation 9 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Allocation 18 should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cebe4e7d-7654-4fc3-b623-64243d1bbf61",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/allocation/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{Allocation 18 id}}"
										}
									]
								},
								"description": "DEVEPLOER 1 is not assigned to Project 3"
							},
							"response": []
						},
						{
							"name": "Change to PROJECTMANAGER 2 in Project 2 should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ba2ae6a7-5013-4e7f-8430-7098aa9c2250",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Some more testing\",\r\n  \"ftePercentage\": 100,\r\n  \"startDate\": \"{{eightMonthsBack}}\",\r\n  \"endDate\": \"{{inSixMonths}}\",\r\n  \"projectManagerId\": \"{{PROJECTMANAGER 2 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/project/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"project",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{Project 2 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Contract 1 of DEVELOPER 2 should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc0106da-548f-477c-81fb-daa18b578eb7",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/contract/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"contract",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{DEVELOPER 2 Contract 1 id}}"
										}
									]
								},
								"description": "Should fail because there are still allocations on this Contract"
							},
							"response": []
						},
						{
							"name": "Get all allocations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "380f2729-677d-4987-b481-dd887fed7934",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Allocation list has expected length of 7\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(7);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/allocation?",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									],
									"query": [
										{
											"key": "employeeId",
											"value": "{{DEVELOPER 1 id}}",
											"disabled": true
										},
										{
											"key": "projectId",
											"value": "{{projectId}}",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "{{fromDate}}",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "{{toDate}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all allocations of DEVELOPER 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "380f2729-677d-4987-b481-dd887fed7934",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Allocation list has expected length of 7\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(7);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/allocation?employeeId={{DEVELOPER 1 id}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									],
									"query": [
										{
											"key": "employeeId",
											"value": "{{DEVELOPER 1 id}}"
										},
										{
											"key": "projectId",
											"value": "{{projectId}}",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "{{fromDate}}",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "{{toDate}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all allocations of DEVELOPER 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "380f2729-677d-4987-b481-dd887fed7934",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Allocation list has expected length of 0\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/allocation?employeeId={{DEVELOPER 2 id}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									],
									"query": [
										{
											"key": "employeeId",
											"value": "{{DEVELOPER 2 id}}"
										},
										{
											"key": "projectId",
											"value": "{{projectId}}",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "{{fromDate}}",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "{{toDate}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all allocations of from Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "380f2729-677d-4987-b481-dd887fed7934",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Allocation list has expected length of 4\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(4);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/allocation?fromDate={{inOneMonths}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									],
									"query": [
										{
											"key": "employeeId",
											"value": "{{DEVELOPER 1 id}}",
											"disabled": true
										},
										{
											"key": "projectId",
											"value": "{{Project 1 id}}",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "{{inOneMonths}}"
										},
										{
											"key": "toDate",
											"value": "{{inFourMonths}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all allocations until Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "380f2729-677d-4987-b481-dd887fed7934",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Allocation list has expected length of 5\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(5);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/allocation?toDate={{inFourMonths}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									],
									"query": [
										{
											"key": "employeeId",
											"value": "{{DEVELOPER 1 id}}",
											"disabled": true
										},
										{
											"key": "projectId",
											"value": "{{Project 1 id}}",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "{{inOneMonths}}",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "{{inFourMonths}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all allocations in between two Dates",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "380f2729-677d-4987-b481-dd887fed7934",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Allocation list has expected length of 2\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/allocation?fromDate={{inOneMonths}}&toDate={{inFourMonths}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									],
									"query": [
										{
											"key": "employeeId",
											"value": "{{DEVELOPER 1 id}}",
											"disabled": true
										},
										{
											"key": "projectId",
											"value": "{{Project 1 id}}",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "{{inOneMonths}}"
										},
										{
											"key": "toDate",
											"value": "{{inFourMonths}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all allocations of Project 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "380f2729-677d-4987-b481-dd887fed7934",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Allocation list has expected length of 3\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(3);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/allocation?projectId={{projectId}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									],
									"query": [
										{
											"key": "employeeId",
											"value": "{{DEVELOPER 1 id}}",
											"disabled": true
										},
										{
											"key": "projectId",
											"value": "{{projectId}}"
										},
										{
											"key": "fromDate",
											"value": "{{fromDate}}",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "{{toDate}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all allocations in Project 1 from Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "380f2729-677d-4987-b481-dd887fed7934",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Allocation list has expected length of 2\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/allocation?projectId={{Project 1 id}}&fromDate={{inOneMonths}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									],
									"query": [
										{
											"key": "employeeId",
											"value": "{{DEVELOPER 1 id}}",
											"disabled": true
										},
										{
											"key": "projectId",
											"value": "{{Project 1 id}}"
										},
										{
											"key": "fromDate",
											"value": "{{inOneMonths}}"
										},
										{
											"key": "toDate",
											"value": "{{inFourMonths}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all allocations in Project 1 until Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "380f2729-677d-4987-b481-dd887fed7934",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Allocation list has expected length of 2\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/allocation?projectId={{Project 1 id}}&toDate={{inFourMonths}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									],
									"query": [
										{
											"key": "employeeId",
											"value": "{{DEVELOPER 1 id}}",
											"disabled": true
										},
										{
											"key": "projectId",
											"value": "{{Project 1 id}}"
										},
										{
											"key": "fromDate",
											"value": "{{inOneMonths}}",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "{{inFourMonths}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all allocations in Project 1 between two Dates",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "380f2729-677d-4987-b481-dd887fed7934",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Allocation list has expected length of 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/allocation?projectId={{Project 1 id}}&fromDate={{inOneMonths}}&toDate={{inFourMonths}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									],
									"query": [
										{
											"key": "employeeId",
											"value": "{{DEVELOPER 1 id}}",
											"disabled": true
										},
										{
											"key": "projectId",
											"value": "{{Project 1 id}}"
										},
										{
											"key": "fromDate",
											"value": "{{inOneMonths}}"
										},
										{
											"key": "toDate",
											"value": "{{inFourMonths}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all contracts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03360b25-5519-4912-8dd5-881d10d958a3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Contract list has expected length of 2\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(5);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/contract?",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"contract"
									],
									"query": [
										{
											"key": "fromDate",
											"value": "{{inOneMonths}}",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "{{inFourMonths}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all contracts from Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03360b25-5519-4912-8dd5-881d10d958a3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Contract list has expected length of 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/contract?fromDate={{inOneMonths}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"contract"
									],
									"query": [
										{
											"key": "fromDate",
											"value": "{{inOneMonths}}"
										},
										{
											"key": "toDate",
											"value": "{{inFourMonths}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all contracts until Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03360b25-5519-4912-8dd5-881d10d958a3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Contract list has expected length of 2\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/contract?toDate={{inFourMonths}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"contract"
									],
									"query": [
										{
											"key": "fromDate",
											"value": "{{inOneMonths}}",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "{{inFourMonths}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all contracts between two Dates",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03360b25-5519-4912-8dd5-881d10d958a3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Contract list has expected length of 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/contract?fromDate={{inOneMonths}}&toDate={{inFourMonths}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"contract"
									],
									"query": [
										{
											"key": "fromDate",
											"value": "{{inOneMonths}}"
										},
										{
											"key": "toDate",
											"value": "{{inFourMonths}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all DEVELOPERS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1eb3ed49-bb37-442b-9175-6c55499edf20",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Developer employee list has expected length of 3\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(3);",
											"});",
											"",
											"pm.test(\"Response has expected role: DEVELOPER\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].role).to.eql(\"DEVELOPER\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/employee?role=DEVELOPER",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee"
									],
									"query": [
										{
											"key": "role",
											"value": "DEVELOPER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all PROJECTMANAGER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1eb3ed49-bb37-442b-9175-6c55499edf20",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Developer employee list has expected length of 2\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Response has expected role: PROJECTMANAGER\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].role).to.eql(\"PROJECTMANAGER\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/employee?role=PROJECTMANAGER",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee"
									],
									"query": [
										{
											"key": "role",
											"value": "PROJECTMANAGER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Projects",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85a695c7-026d-4cec-8aed-233ab6d4185e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Developer employee list has expected length of 2\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/project?",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"project"
									],
									"query": [
										{
											"key": "projectManagerId",
											"value": "{{PROJECTMANAGER 2 id}}",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "{{fourMonthsBack}}",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "{{inOneMonths}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Projects of PROJECTMANAGER 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85a695c7-026d-4cec-8aed-233ab6d4185e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Developer employee list has expected length of 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/project?projectManagerId={{PROJECTMANAGER 2 id}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"project"
									],
									"query": [
										{
											"key": "projectManagerId",
											"value": "{{PROJECTMANAGER 2 id}}"
										},
										{
											"key": "fromDate",
											"value": "{{fourMonthsBack}}",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "{{inOneMonths}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Projects of PROJECTMANAGER 2 from Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85a695c7-026d-4cec-8aed-233ab6d4185e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Developer employee list has expected length of 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/project?projectManagerId={{PROJECTMANAGER 2 id}}&fromDate={{fourMonthsBack}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"project"
									],
									"query": [
										{
											"key": "projectManagerId",
											"value": "{{PROJECTMANAGER 2 id}}"
										},
										{
											"key": "fromDate",
											"value": "{{fourMonthsBack}}"
										},
										{
											"key": "toDate",
											"value": "{{inOneMonths}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Projects of PROJECTMANAGER 1 until Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85a695c7-026d-4cec-8aed-233ab6d4185e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Developer employee list has expected length of 0\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/project?projectManagerId={{PROJECTMANAGER 1 id}}&toDate={{oneMonthsBack}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"project"
									],
									"query": [
										{
											"key": "projectManagerId",
											"value": "{{PROJECTMANAGER 1 id}}"
										},
										{
											"key": "fromDate",
											"value": "{{fourMonthsBack}}",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "{{oneMonthsBack}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Projects of PROJECTMANAGER 1 between two Dates Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85a695c7-026d-4cec-8aed-233ab6d4185e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Developer employee list has expected length of 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/project?projectManagerId={{PROJECTMANAGER 1 id}}&fromDate={{twoMonthsBack}}&toDate={{inThreeMonths}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"project"
									],
									"query": [
										{
											"key": "projectManagerId",
											"value": "{{PROJECTMANAGER 1 id}}"
										},
										{
											"key": "fromDate",
											"value": "{{twoMonthsBack}}"
										},
										{
											"key": "toDate",
											"value": "{{inThreeMonths}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Projects until Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85a695c7-026d-4cec-8aed-233ab6d4185e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Developer employee list has expected length of 1\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/project?toDate={{oneMonthsBack}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"project"
									],
									"query": [
										{
											"key": "projectManagerId",
											"value": "{{PROJECTMANAGER 1 id}}",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "{{fourMonthsBack}}",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "{{oneMonthsBack}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Projects from Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85a695c7-026d-4cec-8aed-233ab6d4185e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Developer employee list has expected length of 2\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/project?fromDate={{inOneMonths}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"project"
									],
									"query": [
										{
											"key": "projectManagerId",
											"value": "{{PROJECTMANAGER 1 id}}",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "{{inOneMonths}}"
										},
										{
											"key": "toDate",
											"value": "{{oneMonthsBack}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Projects between two Dates",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85a695c7-026d-4cec-8aed-233ab6d4185e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Developer employee list has expected length of 2\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(2);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/project?fromDate={{twoMonthsBack}}&toDate={{inThreeMonths}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"project"
									],
									"query": [
										{
											"key": "projectManagerId",
											"value": "{{PROJECTMANAGER 1 id}}",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "{{twoMonthsBack}}"
										},
										{
											"key": "toDate",
											"value": "{{inThreeMonths}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Project 1 should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ef2da738-6a42-49d2-8981-85be1e4130db",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/project/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"project",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{Project 1 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Anonymize DEVELOPER 2 should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ff885e74-0980-415f-982b-9d654acc1583",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/employee/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{DEVELOPER 2 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check if DEVELOPER 2 is still here",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ed593d2-9473-4b03-a3e4-85261c3a2dbf",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has expected id: \" + pm.environment.get(\"DEVELOPER 2 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"DEVELOPER 2 id\"));",
											"});",
											"",
											"pm.test(\"Response has not firstName: \" + pm.environment.get(\"DEVELOPER 2 firstName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.firstName).to.not.eql(pm.environment.get(\"DEVELOPER 2 firstName\"));",
											"});",
											"",
											"pm.test(\"Response has not lastName: \" + pm.environment.get(\"DEVELOPER 2 lastName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.lastName).to.not.eql(pm.environment.get(\"DEVELOPER 2 lastName\"));",
											"});",
											"",
											"pm.test(\"Response has not emailAddress: \" + pm.environment.get(\"DEVELOPER 2 emailAddress\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.emailAddress).to.not.eql(pm.environment.get(\"DEVELOPER 2 emailAddress\"));",
											"});",
											"",
											"pm.test(\"Response has expected active: true\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.active).to.eql(true);",
											"});",
											"",
											"pm.test(\"Response has expected role: DEVELOPER\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.role).to.eql(\"DEVELOPER\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/employee/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{DEVELOPER 2 id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{DEVELOPER 1 token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "78ad5566-36d3-41d9-97f5-9d0bc56cfe7a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "da85a88f-1dd3-40f6-934d-e84853d522f2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "with ADMINISTRATOR 1",
					"item": [
						{
							"name": "Request a JWT token refresh for ADMINISTRATOR 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7709b55-1173-4bd0-a0c6-319afc62d0ee",
										"exec": [
											"function jwt_decode(jwt) {",
											"    var parts = jwt.split('.');",
											"    return JSON.parse(atob(parts[1]));",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"JSON Object has token property\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('token');",
											"});",
											"",
											"pm.test(\"JWT token has employee claim\", function () {",
											"    var jsonData = pm.response.json();",
											"    decodedToken = jwt_decode(jsonData.token);",
											"    pm.expect(decodedToken).to.have.property('employee');",
											"});",
											"",
											"pm.test(\"JWT token has expected firstName: \" + pm.environment.get(\"ADMINISTRATOR 1 firstName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    decodedToken = jwt_decode(jsonData.token);",
											"    pm.expect(decodedToken.employee.firstName).to.eql(pm.environment.get(\"ADMINISTRATOR 1 firstName\"));",
											"});",
											"",
											"pm.test(\"JWT token has expected lastName: \" + pm.environment.get(\"ADMINISTRATOR 1 lastName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    decodedToken = jwt_decode(jsonData.token);",
											"    pm.expect(decodedToken.employee.lastName).to.eql(pm.environment.get(\"ADMINISTRATOR 1 lastName\"));",
											"});",
											"",
											"pm.test(\"JWT token has expected emailAddress: \" + pm.environment.get(\"ADMINISTRATOR 1 emailAddress\"), function () {",
											"    var jsonData = pm.response.json();",
											"    decodedToken = jwt_decode(jsonData.token);",
											"    pm.expect(decodedToken.employee.emailAddress).to.eql(pm.environment.get(\"ADMINISTRATOR 1 emailAddress\"));",
											"});",
											"",
											"pm.test(\"JWT token has expected active: true\", function () {",
											"    var jsonData = pm.response.json();",
											"    decodedToken = jwt_decode(jsonData.token);",
											"    pm.expect(decodedToken.employee.active).to.eql(true);",
											"});",
											"",
											"pm.test(\"JWT token has expected role: ADMINISTRATOR\", function () {",
											"    var jsonData = pm.response.json();",
											"    decodedToken = jwt_decode(jsonData.token);",
											"    pm.expect(decodedToken.employee.role).to.eql(\"ADMINISTRATOR\");",
											"});",
											"",
											"pm.test(\"Save token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"ADMINISTRATOR 1 token\", jsonData.token);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a85da618-0370-466b-b200-3bc006e38f6e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"token\": \"{{ADMINISTRATOR 1 token}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/token",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Allocation 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "364b3d0c-573f-4524-a679-8cfaa25bde43",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/allocation/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{Allocation 5 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Allocation 5 should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cebe4e7d-7654-4fc3-b623-64243d1bbf61",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/allocation/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{Allocation 5 id}}"
										}
									]
								},
								"description": "DEVEPLOER 1 is not assigned to Project 3"
							},
							"response": []
						},
						{
							"name": "Delete Contract 2 of DEVELOPER 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc0106da-548f-477c-81fb-daa18b578eb7",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/contract/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"contract",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{DEVELOPER 2 Contract 2 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Project 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ef2da738-6a42-49d2-8981-85be1e4130db",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/project/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"project",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{Project 1 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all allocations of Project 1 after deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "380f2729-677d-4987-b481-dd887fed7934",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Allocation list has expected length of 0\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/allocation?projectId={{projectId}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									],
									"query": [
										{
											"key": "employeeId",
											"value": "{{DEVELOPER 1 id}}",
											"disabled": true
										},
										{
											"key": "projectId",
											"value": "{{projectId}}"
										},
										{
											"key": "fromDate",
											"value": "{{fromDate}}",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "{{toDate}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Anonymize DEVELOPER 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ff885e74-0980-415f-982b-9d654acc1583",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/employee/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{DEVELOPER 2 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check if DEVELOPER 2 is still here",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ed593d2-9473-4b03-a3e4-85261c3a2dbf",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has expected id: \" + pm.environment.get(\"DEVELOPER 2 id\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"DEVELOPER 2 id\"));",
											"});",
											"",
											"pm.test(\"Response has not firstName: \" + pm.environment.get(\"DEVELOPER 1 firstName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.firstName).to.not.eql(pm.environment.get(\"DEVELOPER 1 firstName\"));",
											"});",
											"",
											"pm.test(\"Response has not lastName: \" + pm.environment.get(\"DEVELOPER 1 lastName\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.lastName).to.not.eql(pm.environment.get(\"DEVELOPER 1 lastName\"));",
											"});",
											"",
											"pm.test(\"Response has not emailAddress: \" + pm.environment.get(\"DEVELOPER 1 emailAddress\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.emailAddress).to.not.eql(pm.environment.get(\"DEVELOPER 1 emailAddress\"));",
											"});",
											"",
											"pm.test(\"Response has expected active: false\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.active).to.eql(false);",
											"});",
											"",
											"pm.test(\"Response has expected role: DEVELOPER\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.role).to.eql(\"DEVELOPER\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/employee/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{DEVELOPER 2 id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{ADMINISTRATOR 1 token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "44c4ca86-f77e-47d2-b0a6-35704723fcf4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0b817ed2-f442-44c7-a36c-3912a5f4b243",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "with DEVELOPER 2",
					"item": [
						{
							"name": "Request a JWT token for DEVELOPER 2 should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7709b55-1173-4bd0-a0c6-319afc62d0ee",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a85da618-0370-466b-b200-3bc006e38f6e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"emailAddress\": \"{{DEVELOPER 2 emailAddress}}\",\r\n  \"rawPassword\": \"{{DEVELOPER 2 password}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/token",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"token"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{DEVELOPER 2 token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "44c4ca86-f77e-47d2-b0a6-35704723fcf4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0b817ed2-f442-44c7-a36c-3912a5f4b243",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "with Guest",
					"item": [
						{
							"name": "Create DEVELOPER 1 should fail",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c3d1d47f-9d85-4079-b81e-27ce18c93047",
										"exec": [
											"function formatDate(date) {\r",
											"    var d = new Date(date),\r",
											"        month = '' + (d.getMonth() + 1),\r",
											"        day = '' + d.getDate(),\r",
											"        year = d.getFullYear();\r",
											"\r",
											"    if (month.length < 2) month = '0' + month;\r",
											"    if (day.length < 2) day = '0' + day;\r",
											"\r",
											"    return [year, month, day].join('-');\r",
											"}\r",
											"\r",
											"var nineMonthsBack = new Date();\r",
											"nineMonthsBack.setMonth(nineMonthsBack.getMonth() - 9);\r",
											"pm.environment.set(\"nineMonthsBack\", formatDate(nineMonthsBack));\r",
											"\r",
											"var eightMonthsBack = new Date();\r",
											"eightMonthsBack.setMonth(eightMonthsBack.getMonth() - 8);\r",
											"pm.environment.set(\"eightMonthsBack\", formatDate(eightMonthsBack));\r",
											"\r",
											"var sevenMonthsBack = new Date();\r",
											"sevenMonthsBack.setMonth(sevenMonthsBack.getMonth() - 7);\r",
											"pm.environment.set(\"sevenMonthsBack\", formatDate(sevenMonthsBack));\r",
											"\r",
											"var sixMonthsBack = new Date();\r",
											"sixMonthsBack.setMonth(sixMonthsBack.getMonth() - 6);\r",
											"pm.environment.set(\"sixMonthsBack\", formatDate(sixMonthsBack));\r",
											"\r",
											"var fiveMonthsBack = new Date();\r",
											"fiveMonthsBack.setMonth(fiveMonthsBack.getMonth() - 5);\r",
											"pm.environment.set(\"fiveMonthsBack\", formatDate(fiveMonthsBack));\r",
											"\r",
											"var fourMonthsBack = new Date();\r",
											"fourMonthsBack.setMonth(fourMonthsBack.getMonth() - 4);\r",
											"pm.environment.set(\"fourMonthsBack\", formatDate(fourMonthsBack));\r",
											"\r",
											"var threeMonthsBack = new Date();\r",
											"threeMonthsBack.setMonth(threeMonthsBack.getMonth() - 3);\r",
											"pm.environment.set(\"threeMonthsBack\", formatDate(threeMonthsBack));\r",
											"\r",
											"var twoMonthsBack = new Date();\r",
											"twoMonthsBack.setMonth(twoMonthsBack.getMonth() - 2);\r",
											"pm.environment.set(\"twoMonthsBack\", formatDate(twoMonthsBack));\r",
											"\r",
											"var oneMonthsBack = new Date();\r",
											"oneMonthsBack.setMonth(oneMonthsBack.getMonth() - 1);\r",
											"pm.environment.set(\"oneMonthsBack\", formatDate(oneMonthsBack));\r",
											"\r",
											"var today = new Date();\r",
											"pm.environment.set(\"today\", formatDate(today));\r",
											"\r",
											"var inOneMonths = new Date();\r",
											"inOneMonths.setMonth(inOneMonths.getMonth() + 1);\r",
											"pm.environment.set(\"inOneMonths\", formatDate(inOneMonths));\r",
											"\r",
											"var inTwoMonths = new Date();\r",
											"inTwoMonths.setMonth(inTwoMonths.getMonth() + 2);\r",
											"pm.environment.set(\"inTwoMonths\", formatDate(inTwoMonths));\r",
											"\r",
											"var inThreeMonths = new Date();\r",
											"inThreeMonths.setMonth(inThreeMonths.getMonth() + 3);\r",
											"pm.environment.set(\"inThreeMonths\", formatDate(inThreeMonths));\r",
											"\r",
											"var inFourMonths = new Date();\r",
											"inFourMonths.setMonth(inFourMonths.getMonth() + 4);\r",
											"pm.environment.set(\"inFourMonths\", formatDate(inFourMonths));\r",
											"\r",
											"var inFiveMonths = new Date();\r",
											"inFiveMonths.setMonth(inFiveMonths.getMonth() + 5);\r",
											"pm.environment.set(\"inFiveMonths\", formatDate(inFiveMonths));\r",
											"\r",
											"var inSixMonths = new Date();\r",
											"inSixMonths.setMonth(inSixMonths.getMonth() + 6);\r",
											"pm.environment.set(\"inSixMonths\", formatDate(inSixMonths));\r",
											"\r",
											"var inSevenMonths = new Date();\r",
											"inSevenMonths.setMonth(inSevenMonths.getMonth() + 7);\r",
											"pm.environment.set(\"inSevenMonths\", formatDate(inSevenMonths));\r",
											"\r",
											"var inEightMonths = new Date();\r",
											"inEightMonths.setMonth(inEightMonths.getMonth() + 8);\r",
											"pm.environment.set(\"inEightMonths\", formatDate(inEightMonths));\r",
											"\r",
											"var inNineMonths = new Date();\r",
											"inNineMonths.setMonth(inNineMonths.getMonth() + 9);\r",
											"pm.environment.set(\"inNineMonths\", formatDate(inNineMonths));\r",
											"\r",
											"var inTenMonths = new Date();\r",
											"inTenMonths.setMonth(inTenMonths.getMonth() + 10);\r",
											"pm.environment.set(\"inTenMonths\", formatDate(inTenMonths));\r",
											"\r",
											"var inElevenMonths = new Date();\r",
											"inElevenMonths.setMonth(inElevenMonths.getMonth() + 11);\r",
											"pm.environment.set(\"inElevenMonths\", formatDate(inElevenMonths));\r",
											"\r",
											"var inTwelveMonths = new Date();\r",
											"inTwelveMonths.setMonth(inTwelveMonths.getMonth() + 12);\r",
											"pm.environment.set(\"inTwelveMonths\", formatDate(inTwelveMonths));\r",
											"\r",
											"var inThirteenMonths = new Date();\r",
											"inThirteenMonths.setMonth(inThirteenMonths.getMonth() + 13);\r",
											"pm.environment.set(\"inThirteenMonths\", formatDate(inThirteenMonths));\r",
											"\r",
											"\r",
											"\r",
											"var nineMonthsAndOneDayBack = new Date();\r",
											"nineMonthsAndOneDayBack.setDate(nineMonthsBack.getDate() - 1);\r",
											"pm.environment.set(\"nineMonthsAndOneDayBack\", formatDate(nineMonthsAndOneDayBack));\r",
											"\r",
											"var eightMonthsAndOneDayBack = new Date();\r",
											"eightMonthsAndOneDayBack.setDate(eightMonthsBack.getDate() - 1);\r",
											"pm.environment.set(\"eightMonthsAndOneDayBack\", formatDate(eightMonthsAndOneDayBack));\r",
											"\r",
											"var sevenMonthsAndOneDayBack = new Date();\r",
											"sevenMonthsAndOneDayBack.setDate(sevenMonthsBack.getDate() - 1);\r",
											"pm.environment.set(\"sevenMonthsAndOneDayBack\", formatDate(sevenMonthsAndOneDayBack));\r",
											"\r",
											"var sixMonthsAndOneDayBack = new Date();\r",
											"sixMonthsAndOneDayBack.setDate(sixMonthsBack.getDate() - 1);\r",
											"pm.environment.set(\"sixMonthsAndOneDayBack\", formatDate(sixMonthsAndOneDayBack));\r",
											"\r",
											"var fiveMonthsAndOneDayBack = new Date();\r",
											"fiveMonthsAndOneDayBack.setDate(fiveMonthsBack.getDate() - 1);\r",
											"pm.environment.set(\"fiveMonthsAndOneDayBack\", formatDate(fiveMonthsAndOneDayBack));\r",
											"\r",
											"var fourMonthsAndOneDayBack = new Date();\r",
											"fourMonthsAndOneDayBack.setDate(fourMonthsBack.getDate() - 1);\r",
											"pm.environment.set(\"fourMonthsAndOneDayBack\", formatDate(fourMonthsAndOneDayBack));\r",
											"\r",
											"var threeMonthsAndOneDayBack = new Date();\r",
											"threeMonthsAndOneDayBack.setDate(threeMonthsBack.getDate() - 1);\r",
											"pm.environment.set(\"threeMonthsAndOneDayBack\", formatDate(threeMonthsAndOneDayBack));\r",
											"\r",
											"var twoMonthsAndOneDayBack = new Date();\r",
											"twoMonthsAndOneDayBack.setDate(twoMonthsBack.getDate() - 1);\r",
											"pm.environment.set(\"twoMonthsAndOneDayBack\", formatDate(twoMonthsAndOneDayBack));\r",
											"\r",
											"var oneMonthsAndOneDayBack = new Date();\r",
											"oneMonthsAndOneDayBack.setDate(oneMonthsBack.getDate() - 1);\r",
											"pm.environment.set(\"oneMonthsAndOneDayBack\", formatDate(oneMonthsAndOneDayBack));\r",
											"\r",
											"var today = new Date();\r",
											"pm.environment.set(\"today\", formatDate(today));\r",
											"\r",
											"var yesterday = new Date();\r",
											"yesterday.setDate(today.getDate() - 1);\r",
											"pm.environment.set(\"yesterday\", formatDate(yesterday));\r",
											"\r",
											"var tomorrow = new Date();\r",
											"tomorrow.setDate(today.getDate() + 1);\r",
											"pm.environment.set(\"tomorrow\", formatDate(tomorrow));\r",
											"\r",
											"var inOneMonthsAndOneDay = new Date();\r",
											"inOneMonthsAndOneDay.setDate(inOneMonths.getDate() + 1);\r",
											"pm.environment.set(\"inOneMonthsAndOneDay\", formatDate(inOneMonthsAndOneDay));\r",
											"\r",
											"var inTwoMonthsAndOneDay = new Date();\r",
											"inTwoMonthsAndOneDay.setDate(inTwoMonths.getDate() + 1);\r",
											"pm.environment.set(\"inTwoMonthsAndOneDay\", formatDate(inTwoMonthsAndOneDay));\r",
											"\r",
											"var inThreeMonthsAndOneDay = new Date();\r",
											"inThreeMonthsAndOneDay.setDate(inThreeMonths.getDate() + 1);\r",
											"pm.environment.set(\"inThreeMonthsAndOneDay\", formatDate(inThreeMonthsAndOneDay));\r",
											"\r",
											"var inFourMonthsAndOneDay = new Date();\r",
											"inFourMonthsAndOneDay.setDate(inFourMonths.getDate() + 1);\r",
											"pm.environment.set(\"inFourMonthsAndOneDay\", formatDate(inFourMonthsAndOneDay));\r",
											"\r",
											"var inFiveMonthsAndOneDay = new Date();\r",
											"inFiveMonthsAndOneDay.setDate(inFiveMonths.getDate() + 1);\r",
											"pm.environment.set(\"inFiveMonthsAndOneDay\", formatDate(inFiveMonthsAndOneDay));\r",
											"\r",
											"var inSixMonthsAndOneDay = new Date();\r",
											"inSixMonthsAndOneDay.setDate(inSixMonths.getDate() + 1);\r",
											"pm.environment.set(\"inSixMonthsAndOneDay\", formatDate(inSixMonthsAndOneDay));\r",
											"\r",
											"var inSevenMonthsAndOneDay = new Date();\r",
											"inSevenMonthsAndOneDay.setDate(inSevenMonths.getDate() + 1);\r",
											"pm.environment.set(\"inSevenMonthsAndOneDay\", formatDate(inSevenMonthsAndOneDay));\r",
											"\r",
											"var inEightMonthsAndOneDay = new Date();\r",
											"inEightMonthsAndOneDay.setDate(inEightMonths.getDate() + 1);\r",
											"pm.environment.set(\"inEightMonthsAndOneDay\", formatDate(inEightMonthsAndOneDay));\r",
											"\r",
											"var inNineMonthsAndOneDay = new Date();\r",
											"inNineMonthsAndOneDay.setDate(inNineMonths.getDate() + 1);\r",
											"pm.environment.set(\"inNineMonthsAndOneDay\", formatDate(inNineMonthsAndOneDay));\r",
											"\r",
											"var inTenMonthsAndOneDay = new Date();\r",
											"inTenMonthsAndOneDay.setDate(inTenMonths.getDate() + 1);\r",
											"pm.environment.set(\"inTenMonthsAndOneDay\", formatDate(inTenMonthsAndOneDay));\r",
											"\r",
											"var inElevenMonthsAndOneDay = new Date();\r",
											"inElevenMonthsAndOneDay.setDate(inElevenMonths.getDate() + 1);\r",
											"pm.environment.set(\"inElevenMonthsAndOneDay\", formatDate(inElevenMonthsAndOneDay));\r",
											"\r",
											"var inTwelveMonthsAndOneDay = new Date();\r",
											"inTwelveMonthsAndOneDay.setDate(inTwelveMonths.getDate() + 1);\r",
											"pm.environment.set(\"inTwelveMonthsAndOneDay\", formatDate(inTwelveMonthsAndOneDay));\r",
											"\r",
											"var inThirteenMonthsAndOneDay = new Date();\r",
											"inThirteenMonthsAndOneDay.setDate(inThirteenMonths.getDate() + 1);\r",
											"pm.environment.set(\"inThirteenMonthsAndOneDay\", formatDate(inThirteenMonthsAndOneDay));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f646481d-f33b-41d9-aa0e-e2aa2dba606d",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"active\": true,\r\n  \"firstName\": \"{{DEVELOPER 1 firstName}}\",\r\n  \"lastName\": \"{{DEVELOPER 1 lastName}}\",\r\n  \"emailAddress\": \"{{DEVELOPER 1 emailAddress}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/employee?password={{DEVELOPER 1 password}}&role=DEVELOPER",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee"
									],
									"query": [
										{
											"key": "password",
											"value": "{{DEVELOPER 1 password}}"
										},
										{
											"key": "role",
											"value": "DEVELOPER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update PROJECTMANAGER 1 should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3359f506-94fd-4535-bcbb-0f064c5320e3",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"active\": true,\r\n  \"firstName\": \"{{PROJECTMANAGER 1 firstName}}\",\r\n  \"lastName\": \"{{PROJECTMANAGER 1 lastName}}\",\r\n  \"emailAddress\": \"{{PROJECTMANAGER 1 emailAddress}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/employee/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{PROJECTMANAGER 1 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all Developers should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1eb3ed49-bb37-442b-9175-6c55499edf20",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/employee?role=DEVELOPER",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee"
									],
									"query": [
										{
											"key": "role",
											"value": "DEVELOPER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check if DEVELOPER 1 is here should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ed593d2-9473-4b03-a3e4-85261c3a2dbf",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/employee/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"employee",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{DEVELOPER 1 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Contract 1 for DEVELOPER 1 should fail",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8cc344b8-1169-498b-a1ba-5a0bf3b43a1d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1d7ed2bb-b222-4f48-a070-725445dbac57",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{twoMonthsBack}}\",\r\n  \"endDate\": \"{{inNineMonths}}\",\r\n  \"pensumPercentage\": 100,\r\n  \"employeeId\": \"{{DEVELOPER 1 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/contract",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"contract"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all contracts should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14658db7-0568-4c60-93f7-0ddd6a96bcf8",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/contract?",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"contract"
									],
									"query": [
										{
											"key": "fromDate",
											"value": "{{fromDate}}",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "{{toDate}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update contract 1 of DEVELOPER 1 should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e78a8665-9dd0-4ce3-90c3-4376bd30e37b",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{twoMonthsBack}}\",\r\n  \"endDate\": \"{{inTenMonths}}\",\r\n  \"pensumPercentage\": 80,\r\n  \"employeeId\": \"{{DEVELOPER 1 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/contract/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"contract",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{DEVELOPER 1 Contract 1 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check updated contract 1 should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7f24a45-2d73-4f37-9a02-07739ef7f6c6",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/contract/:id",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"contract",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{DEVELOPER 1 Contract 1 id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new project 1 should fail",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ac4eb02e-5a8c-45e6-83d8-2930195ae609",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4a6a2e57-18c2-4d58-bd3a-5b96e8957eca",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Project 1: Testing\",\r\n  \"ftePercentage\": 1500,\r\n  \"startDate\": \"{{today}}\",\r\n  \"endDate\": \"{{inTwelveMonths}}\",\r\n  \"projectManagerId\": \"{{PROJECTMANAGER 1 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/project",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"project"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all projects should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "624e625a-0876-4572-a48f-652949a87046",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{Host}}/api/project?",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"project"
									],
									"query": [
										{
											"key": "projectManagerId",
											"value": "{{projectManagerId}}",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "{{fromDate}}",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "{{toDate}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Contract 1 for DEVELOPER 2 should fail",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8cc344b8-1169-498b-a1ba-5a0bf3b43a1d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1d7ed2bb-b222-4f48-a070-725445dbac57",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{fourMonthsBack}}\",\r\n  \"endDate\": \"{{inTwoMonths}}\",\r\n  \"pensumPercentage\": 100,\r\n  \"employeeId\": \"{{DEVELOPER 2 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/contract",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"contract"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Allocation 1 should fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8deaa12a-3040-42ff-b96d-3ca93f3b3be9",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"startDate\": \"{{today}}\",\r\n  \"endDate\": \"{{inThreeMonths}}\",\r\n  \"pensumPercentage\": 30,\r\n  \"contractId\": \"{{DEVELOPER 1 Contract 1 id}}\",\r\n  \"projectId\": \"{{Project 1 id}}\"\r\n}"
								},
								"url": {
									"raw": "{{Host}}/api/allocation",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"allocation"
									]
								},
								"description": "ADMINISTRATORS can create allocations for every project, PROJECTMANAGER for their own projects and DEVELOPER for none"
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "abd0e7c6-e4cb-4459-b168-3a9dd1d5081b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "96f4be62-b8eb-4a2c-81be-df000bc07098",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1a7aaba7-9ace-4f0a-a164-e119acd6be5c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a70b856b-1339-4c5b-a3f8-39f8da405e1c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}